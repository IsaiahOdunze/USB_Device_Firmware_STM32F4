
USB_Device.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001c5c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08001e0c  08001e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f74  08001f74  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08001f74  08001f74  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f74  08001f74  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f74  08001f74  00011f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f78  08001f78  00011f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08001f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00000068  20000080  20000080  00020080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   000024d9  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000944  00000000  00000000  00022589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00022ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  000230a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b50a  00000000  00000000  00023228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002154  00000000  00000000  0003e732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098165  00000000  00000000  00040886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d89eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f48  00000000  00000000  000d8a3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000084  00000000  00000000  000d9984  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      00000117  00000000  00000000  000d9a08  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001df4 	.word	0x08001df4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08001df4 	.word	0x08001df4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000298:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800029c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80002a0:	f003 0301 	and.w	r3, r3, #1
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80002a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80002b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d00b      	beq.n	80002d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80002b8:	e000      	b.n	80002bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80002ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80002bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0f9      	beq.n	80002ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80002c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80002ca:	687a      	ldr	r2, [r7, #4]
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80002d0:	687b      	ldr	r3, [r7, #4]
}
 80002d2:	4618      	mov	r0, r3
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 80002de:	b580      	push	{r7, lr}
 80002e0:	b086      	sub	sp, #24
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  int i=0;
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]
 80002f2:	e009      	b.n	8000308 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80002f4:	68bb      	ldr	r3, [r7, #8]
 80002f6:	1c5a      	adds	r2, r3, #1
 80002f8:	60ba      	str	r2, [r7, #8]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ffc7 	bl	8000290 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000302:	697b      	ldr	r3, [r7, #20]
 8000304:	3301      	adds	r3, #1
 8000306:	617b      	str	r3, [r7, #20]
 8000308:	697a      	ldr	r2, [r7, #20]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	429a      	cmp	r2, r3
 800030e:	dbf1      	blt.n	80002f4 <_write+0x16>

  return len;
 8000310:	687b      	ldr	r3, [r7, #4]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3718      	adds	r7, #24
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <_get_log_level_string>:

char const * const _get_log_level_string(LogLevel const log_level)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	2b02      	cmp	r3, #2
 800032a:	d00a      	beq.n	8000342 <_get_log_level_string+0x26>
 800032c:	2b02      	cmp	r3, #2
 800032e:	dc0a      	bgt.n	8000346 <_get_log_level_string+0x2a>
 8000330:	2b00      	cmp	r3, #0
 8000332:	d002      	beq.n	800033a <_get_log_level_string+0x1e>
 8000334:	2b01      	cmp	r3, #1
 8000336:	d002      	beq.n	800033e <_get_log_level_string+0x22>
 8000338:	e005      	b.n	8000346 <_get_log_level_string+0x2a>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 800033a:	4b06      	ldr	r3, [pc, #24]	; (8000354 <_get_log_level_string+0x38>)
 800033c:	e004      	b.n	8000348 <_get_log_level_string+0x2c>
        case LOG_LEVEL_INFORMATION:
            return "INFO";
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <_get_log_level_string+0x3c>)
 8000340:	e002      	b.n	8000348 <_get_log_level_string+0x2c>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 8000342:	4b06      	ldr	r3, [pc, #24]	; (800035c <_get_log_level_string+0x40>)
 8000344:	e000      	b.n	8000348 <_get_log_level_string+0x2c>
    }
    return "INVALID";
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <_get_log_level_string+0x44>)
}
 8000348:	4618      	mov	r0, r3
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	08001e0c 	.word	0x08001e0c
 8000358:	08001e14 	.word	0x08001e14
 800035c:	08001e1c 	.word	0x08001e1c
 8000360:	08001e24 	.word	0x08001e24

08000364 <_log>:

static void _log(LogLevel const log_level, char const * const format, va_list args)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	60b9      	str	r1, [r7, #8]
 800036e:	607a      	str	r2, [r7, #4]
 8000370:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level){
 8000372:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <_log+0x4c>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	7bfa      	ldrb	r2, [r7, #15]
 8000378:	429a      	cmp	r2, r3
 800037a:	d814      	bhi.n	80003a6 <_log+0x42>
        return;
    }

	printf("[%s] ", _get_log_level_string(log_level));
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ffcc 	bl	800031c <_get_log_level_string>
 8000384:	4603      	mov	r3, r0
 8000386:	4619      	mov	r1, r3
 8000388:	480a      	ldr	r0, [pc, #40]	; (80003b4 <_log+0x50>)
 800038a:	f000 ffff 	bl	800138c <iprintf>
	vfprintf(stdout, format, args);
 800038e:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <_log+0x54>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	68b9      	ldr	r1, [r7, #8]
 8000398:	4618      	mov	r0, r3
 800039a:	f000 fe59 	bl	8001050 <vfiprintf>
	printf("\n");
 800039e:	200a      	movs	r0, #10
 80003a0:	f001 f80c 	bl	80013bc <putchar>
 80003a4:	e000      	b.n	80003a8 <_log+0x44>
        return;
 80003a6:	bf00      	nop
}
 80003a8:	3710      	adds	r7, #16
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000000 	.word	0x20000000
 80003b4:	08001e2c 	.word	0x08001e2c
 80003b8:	2000001c 	.word	0x2000001c

080003bc <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80003bc:	b40f      	push	{r0, r1, r2, r3}
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80003c4:	f107 0314 	add.w	r3, r7, #20
 80003c8:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFORMATION, format, args);
 80003ca:	687a      	ldr	r2, [r7, #4]
 80003cc:	6939      	ldr	r1, [r7, #16]
 80003ce:	2001      	movs	r0, #1
 80003d0:	f7ff ffc8 	bl	8000364 <_log>
    va_end(args);
}
 80003d4:	bf00      	nop
 80003d6:	3708      	adds	r7, #8
 80003d8:	46bd      	mov	sp, r7
 80003da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80003de:	b004      	add	sp, #16
 80003e0:	4770      	bx	lr
	...

080003e4 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
    /* Loop forever */
	log_info("Program entry point.");
 80003e8:	4805      	ldr	r0, [pc, #20]	; (8000400 <main+0x1c>)
 80003ea:	f7ff ffe7 	bl	80003bc <log_info>
	usb_device.ptr_out_buffer = &buffer;
 80003ee:	4b05      	ldr	r3, [pc, #20]	; (8000404 <main+0x20>)
 80003f0:	4a05      	ldr	r2, [pc, #20]	; (8000408 <main+0x24>)
 80003f2:	605a      	str	r2, [r3, #4]
	usbd_initialize(&usb_device);
 80003f4:	4803      	ldr	r0, [pc, #12]	; (8000404 <main+0x20>)
 80003f6:	f000 fc15 	bl	8000c24 <usbd_initialize>
	for(;;)
	{
		usbd_poll();
 80003fa:	f000 fc33 	bl	8000c64 <usbd_poll>
 80003fe:	e7fc      	b.n	80003fa <main+0x16>
 8000400:	08001e54 	.word	0x08001e54
 8000404:	2000009c 	.word	0x2000009c
 8000408:	200000b0 	.word	0x200000b0

0800040c <configure_clock>:
//AHB prescaler = 1
//APB prescaler1 = 2, APB prescaler2 = 1
//MCO1 prescaler = 2

static void configure_clock()
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0
	MODIFY_REG(FLASH->ACR,
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <configure_clock+0x9c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	f023 030f 	bic.w	r3, r3, #15
 8000418:	4a23      	ldr	r2, [pc, #140]	; (80004a8 <configure_clock+0x9c>)
 800041a:	f043 0302 	orr.w	r3, r3, #2
 800041e:	6013      	str	r3, [r2, #0]
			_VAL2FLD(FLASH_ACR_LATENCY, FLASH_ACR_LATENCY_2WS)
			//FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos);
			);

	//Enable the HSE
	SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000420:	4b22      	ldr	r3, [pc, #136]	; (80004ac <configure_clock+0xa0>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a21      	ldr	r2, [pc, #132]	; (80004ac <configure_clock+0xa0>)
 8000426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800042a:	6013      	str	r3, [r2, #0]

	//Wait until HSE is stable
	while(!READ_BIT(RCC->CR, RCC_CR_HSERDY));
 800042c:	bf00      	nop
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <configure_clock+0xa0>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000436:	2b00      	cmp	r3, #0
 8000438:	d0f9      	beq.n	800042e <configure_clock+0x22>


	//Configures PLL
	MODIFY_REG(RCC->PLLCFGR,
 800043a:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <configure_clock+0xa0>)
 800043c:	685b      	ldr	r3, [r3, #4]
 800043e:	4a1c      	ldr	r2, [pc, #112]	; (80004b0 <configure_clock+0xa4>)
 8000440:	401a      	ands	r2, r3
 8000442:	491a      	ldr	r1, [pc, #104]	; (80004ac <configure_clock+0xa0>)
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <configure_clock+0xa8>)
 8000446:	4313      	orrs	r3, r2
 8000448:	604b      	str	r3, [r1, #4]
			RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
			_VAL2FLD(RCC_PLLCFGR_PLLM, 4)| _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | _VAL2FLD(RCC_PLLCFGR_PLLSRC, 1)
			);

	//Enable the PLL module
	SET_BIT(RCC->CR, RCC_CR_PLLON);
 800044a:	4b18      	ldr	r3, [pc, #96]	; (80004ac <configure_clock+0xa0>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a17      	ldr	r2, [pc, #92]	; (80004ac <configure_clock+0xa0>)
 8000450:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000454:	6013      	str	r3, [r2, #0]

	//wait till PLL is stable
	while(!READ_BIT(RCC->CR, RCC_CR_PLLRDY));
 8000456:	bf00      	nop
 8000458:	4b14      	ldr	r3, [pc, #80]	; (80004ac <configure_clock+0xa0>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f9      	beq.n	8000458 <configure_clock+0x4c>

	//switches system clock to PLL
	MODIFY_REG(RCC->CFGR,
 8000464:	4b11      	ldr	r3, [pc, #68]	; (80004ac <configure_clock+0xa0>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	f023 0303 	bic.w	r3, r3, #3
 800046c:	4a0f      	ldr	r2, [pc, #60]	; (80004ac <configure_clock+0xa0>)
 800046e:	f043 0302 	orr.w	r3, r3, #2
 8000472:	6093      	str	r3, [r2, #8]
			RCC_CFGR_SW,
			_VAL2FLD(RCC_CFGR_SW, RCC_CFGR_SW_PLL)
			);

	//Configure the PPRE1
	MODIFY_REG(RCC->CFGR,
 8000474:	4b0d      	ldr	r3, [pc, #52]	; (80004ac <configure_clock+0xa0>)
 8000476:	689b      	ldr	r3, [r3, #8]
 8000478:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800047c:	4a0b      	ldr	r2, [pc, #44]	; (80004ac <configure_clock+0xa0>)
 800047e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000482:	6093      	str	r3, [r2, #8]
			RCC_CFGR_PPRE1,
			_VAL2FLD(RCC_CFGR_PPRE1,4)
			);
	//wait until PLL is used
	while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000484:	bf00      	nop
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <configure_clock+0xa0>)
 8000488:	689b      	ldr	r3, [r3, #8]
 800048a:	f003 030c 	and.w	r3, r3, #12
 800048e:	2b08      	cmp	r3, #8
 8000490:	d1f9      	bne.n	8000486 <configure_clock+0x7a>

	//Disable HSI
	CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <configure_clock+0xa0>)
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <configure_clock+0xa0>)
 8000498:	f023 0301 	bic.w	r3, r3, #1
 800049c:	6013      	str	r3, [r2, #0]
}
 800049e:	bf00      	nop
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	40023c00 	.word	0x40023c00
 80004ac:	40023800 	.word	0x40023800
 80004b0:	f0bc8000 	.word	0xf0bc8000
 80004b4:	03401204 	.word	0x03401204

080004b8 <SystemInit>:
			GPIO_MODER_MODER8,
			_VAL2FLD(GPIO_MODER_MODER8, 2)
	);
}

void SystemInit(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	//configure_mco1();
	configure_clock();
 80004bc:	f7ff ffa6 	bl	800040c <configure_clock>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <IN_ENDPOINT>:
#define ENDPOINT_COUNT 6

// \Description returns the structure containing the registers of a specific IN endpoint
// \param endpoint_number The number of the In endpoint that we want to access the registers of.
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	015b      	lsls	r3, r3, #5
 80004d2:	461a      	mov	r2, r3
 80004d4:	4b03      	ldr	r3, [pc, #12]	; (80004e4 <IN_ENDPOINT+0x20>)
 80004d6:	4413      	add	r3, r2
}
 80004d8:	4618      	mov	r0, r3
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	40040900 	.word	0x40040900

080004e8 <OUT_ENDPOINT>:

// \Description returns the structure containing the registers of a specific OUT endpoint
// \param endpoint_number The number of the OUT endpoint that we want to access the registers of.
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	015b      	lsls	r3, r3, #5
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <OUT_ENDPOINT+0x20>)
 80004fa:	4413      	add	r3, r2
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	370c      	adds	r7, #12
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	40040b00 	.word	0x40040b00

0800050c <FIFO>:

inline static __IO uint32_t *FIFO(uint8_t endpoint_number)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]
	return (__IO uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	031b      	lsls	r3, r3, #12
 800051a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800051e:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <initialize_gpio_pins>:
 *  Created on: Mar 6, 2023
 *      Author: IsaiahOdunze
 */
#include "usbd_driver.h"

static void initialize_gpio_pins(){
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	//Enables the clock for GPIOB
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 8000534:	4b0d      	ldr	r3, [pc, #52]	; (800056c <initialize_gpio_pins+0x3c>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a0c      	ldr	r2, [pc, #48]	; (800056c <initialize_gpio_pins+0x3c>)
 800053a:	f043 0302 	orr.w	r3, r3, #2
 800053e:	6313      	str	r3, [r2, #48]	; 0x30

	//Sets alternate function 12 for : PB14 (-), and Pb15 (+).
	MODIFY_REG(GPIOB->AFR[1],
 8000540:	4b0b      	ldr	r3, [pc, #44]	; (8000570 <initialize_gpio_pins+0x40>)
 8000542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000544:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <initialize_gpio_pins+0x40>)
 800054a:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 800054e:	6253      	str	r3, [r2, #36]	; 0x24
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14, 0xC) | _VAL2FLD(GPIO_AFRH_AFSEL14, 0xC)
	);

	//Configures USB pins (in GPIOB) to work in alternate function mode.
	MODIFY_REG(GPIOB->MODER,
 8000550:	4b07      	ldr	r3, [pc, #28]	; (8000570 <initialize_gpio_pins+0x40>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000558:	4a05      	ldr	r2, [pc, #20]	; (8000570 <initialize_gpio_pins+0x40>)
 800055a:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800055e:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15,
			_VAL2FLD(GPIO_MODER_MODER14, 2) | _VAL2FLD(GPIO_MODER_MODER15, 2)
	);
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800
 8000570:	40020400 	.word	0x40020400

08000574 <initialize_core>:

static void initialize_core(){
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0

	//Enables the clock for USB core
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <initialize_core+0x84>)
 800057a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057c:	4a1e      	ldr	r2, [pc, #120]	; (80005f8 <initialize_core+0x84>)
 800057e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000582:	6313      	str	r3, [r2, #48]	; 0x30

	//Configures the USB core to run in device mode, and to use the embedded full-speed PHY.
	MODIFY_REG(USB_OTG_HS->GUSBCFG,
 8000584:	4b1d      	ldr	r3, [pc, #116]	; (80005fc <initialize_core+0x88>)
 8000586:	68db      	ldr	r3, [r3, #12]
 8000588:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800058c:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 8000590:	4a1a      	ldr	r2, [pc, #104]	; (80005fc <initialize_core+0x88>)
 8000592:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000596:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 800059a:	60d3      	str	r3, [r2, #12]
			USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
			USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT,0x09)
	);

	//Configures the device to run in full speed mode.
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <initialize_core+0x8c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <initialize_core+0x8c>)
 80005a2:	f043 0303 	orr.w	r3, r3, #3
 80005a6:	6013      	str	r3, [r2, #0]
			USB_OTG_DCFG_DSPD,
			_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	//Enable VBUS sensing device
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <initialize_core+0x88>)
 80005aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005ac:	4a13      	ldr	r2, [pc, #76]	; (80005fc <initialize_core+0x88>)
 80005ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b2:	6393      	str	r3, [r2, #56]	; 0x38

	//Unmasks the main USB core interrupts
	SET_BIT(USB_OTG_HS->GINTMSK,
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <initialize_core+0x88>)
 80005b6:	699a      	ldr	r2, [r3, #24]
 80005b8:	4910      	ldr	r1, [pc, #64]	; (80005fc <initialize_core+0x88>)
 80005ba:	4b12      	ldr	r3, [pc, #72]	; (8000604 <initialize_core+0x90>)
 80005bc:	4313      	orrs	r3, r2
 80005be:	618b      	str	r3, [r1, #24]
			USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
			USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	//Clears all pending core interrupts.
	WRITE_REG(USB_OTG_HS->GINTSTS, 0xFFFFFFFF);
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <initialize_core+0x88>)
 80005c2:	f04f 32ff 	mov.w	r2, #4294967295
 80005c6:	615a      	str	r2, [r3, #20]

	//Unmasks USB global interrupts.
	SET_BIT(USB_OTG_HS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <initialize_core+0x88>)
 80005ca:	689b      	ldr	r3, [r3, #8]
 80005cc:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <initialize_core+0x88>)
 80005ce:	f043 0301 	orr.w	r3, r3, #1
 80005d2:	6093      	str	r3, [r2, #8]

	// Unmask the transfer completed interrupt for all endpoints
	SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <initialize_core+0x8c>)
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	4a09      	ldr	r2, [pc, #36]	; (8000600 <initialize_core+0x8c>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <initialize_core+0x8c>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	4a06      	ldr	r2, [pc, #24]	; (8000600 <initialize_core+0x8c>)
 80005e6:	f043 0301 	orr.w	r3, r3, #1
 80005ea:	6113      	str	r3, [r2, #16]

}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40040000 	.word	0x40040000
 8000600:	40040800 	.word	0x40040800
 8000604:	800c3818 	.word	0x800c3818

08000608 <set_device_address>:

static void set_device_address(uint8_t address)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 8000612:	4b08      	ldr	r3, [pc, #32]	; (8000634 <set_device_address+0x2c>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	011b      	lsls	r3, r3, #4
 800061e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8000622:	4904      	ldr	r1, [pc, #16]	; (8000634 <set_device_address+0x2c>)
 8000624:	4313      	orrs	r3, r2
 8000626:	600b      	str	r3, [r1, #0]
			   USB_OTG_DCFG_DAD,
			   _VAL2FLD(USB_OTG_DCFG_DAD,address)
	);
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40040800 	.word	0x40040800

08000638 <connect>:

//Connects the USB device to the bus. (brief)
static void connect(){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

	//Powers the transceivers on.
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <connect+0x28>)
 800063e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000640:	4a07      	ldr	r2, [pc, #28]	; (8000660 <connect+0x28>)
 8000642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000646:	6393      	str	r3, [r2, #56]	; 0x38


	//Connects the device to the bus.
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <connect+0x2c>)
 800064a:	685b      	ldr	r3, [r3, #4]
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <connect+0x2c>)
 800064e:	f023 0302 	bic.w	r3, r3, #2
 8000652:	6053      	str	r3, [r2, #4]
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40040000 	.word	0x40040000
 8000664:	40040800 	.word	0x40040800

08000668 <disconnect>:

//Disconnects the USB device from the bus (brief)
static void disconnect(){
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
	//Disconnect the device from the bus.
	SET_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <disconnect+0x28>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	4a07      	ldr	r2, [pc, #28]	; (8000690 <disconnect+0x28>)
 8000672:	f043 0302 	orr.w	r3, r3, #2
 8000676:	6053      	str	r3, [r2, #4]

	//Powers the transceivers off.
	CLEAR_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000678:	4b06      	ldr	r3, [pc, #24]	; (8000694 <disconnect+0x2c>)
 800067a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067c:	4a05      	ldr	r2, [pc, #20]	; (8000694 <disconnect+0x2c>)
 800067e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000682:	6393      	str	r3, [r2, #56]	; 0x38

}
 8000684:	bf00      	nop
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40040800 	.word	0x40040800
 8000694:	40040000 	.word	0x40040000

08000698 <flush_rxfifo>:

// Flushes RxFIFO buffer for all OUT endpoints
static void flush_rxfifo()
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_HS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <flush_rxfifo+0x1c>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a04      	ldr	r2, [pc, #16]	; (80006b4 <flush_rxfifo+0x1c>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	40040000 	.word	0x40040000

080006b8 <refresh_fifo_start_addresses>:

// Updates the start addresses of all FIFOs according to their size
static void refresh_fifo_start_addresses()
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	uint16_t start_address = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_HS->GRXFSIZ) * 4;
 80006be:	4b22      	ldr	r3, [pc, #136]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	80fb      	strh	r3, [r7, #6]

	MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 80006c8:	4b1f      	ldr	r3, [pc, #124]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 80006ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006cc:	0c1b      	lsrs	r3, r3, #16
 80006ce:	041b      	lsls	r3, r3, #16
 80006d0:	88fa      	ldrh	r2, [r7, #6]
 80006d2:	491d      	ldr	r1, [pc, #116]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 80006d4:	4313      	orrs	r3, r2
 80006d6:	628b      	str	r3, [r1, #40]	; 0x28
			   USB_OTG_TX0FSA,
			   _VAL2FLD(USB_OTG_TX0FSA, start_address)
	);

	start_address += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_HS->DIEPTXF0_HNPTXFSIZ) * 4;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	0c1b      	lsrs	r3, r3, #16
 80006de:	b29b      	uxth	r3, r3
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	88fb      	ldrh	r3, [r7, #6]
 80006e6:	4413      	add	r3, r2
 80006e8:	80fb      	strh	r3, [r7, #6]

	for(uint8_t txfifo_number = 0 ; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80006ea:	2300      	movs	r3, #0
 80006ec:	717b      	strb	r3, [r7, #5]
 80006ee:	e020      	b.n	8000732 <refresh_fifo_start_addresses+0x7a>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[txfifo_number],
 80006f0:	4a15      	ldr	r2, [pc, #84]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 80006f2:	797b      	ldrb	r3, [r7, #5]
 80006f4:	3340      	adds	r3, #64	; 0x40
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	4413      	add	r3, r2
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	0c1b      	lsrs	r3, r3, #16
 80006fe:	041b      	lsls	r3, r3, #16
 8000700:	88fa      	ldrh	r2, [r7, #6]
 8000702:	4811      	ldr	r0, [pc, #68]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 8000704:	7979      	ldrb	r1, [r7, #5]
 8000706:	431a      	orrs	r2, r3
 8000708:	f101 0340 	add.w	r3, r1, #64	; 0x40
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4403      	add	r3, r0
 8000710:	605a      	str	r2, [r3, #4]
				   USB_OTG_NPTXFSA,
				   _VAL2FLD(USB_OTG_NPTXFSA, start_address)
		);

		start_address += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_HS->DIEPTXF[txfifo_number]) * 4;
 8000712:	4a0d      	ldr	r2, [pc, #52]	; (8000748 <refresh_fifo_start_addresses+0x90>)
 8000714:	797b      	ldrb	r3, [r7, #5]
 8000716:	3340      	adds	r3, #64	; 0x40
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	4413      	add	r3, r2
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	0c1b      	lsrs	r3, r3, #16
 8000720:	b29b      	uxth	r3, r3
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	b29a      	uxth	r2, r3
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	4413      	add	r3, r2
 800072a:	80fb      	strh	r3, [r7, #6]
	for(uint8_t txfifo_number = 0 ; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 800072c:	797b      	ldrb	r3, [r7, #5]
 800072e:	3301      	adds	r3, #1
 8000730:	717b      	strb	r3, [r7, #5]
 8000732:	797b      	ldrb	r3, [r7, #5]
 8000734:	2b04      	cmp	r3, #4
 8000736:	d9db      	bls.n	80006f0 <refresh_fifo_start_addresses+0x38>
	}
}
 8000738:	bf00      	nop
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40040000 	.word	0x40040000

0800074c <configure_rxfifo_size>:
	\param size The size of the largest OUT endpoint in bytes
	\note RxFIFO is shared between all OUT endpoints
	\note Information in section 35.10.1 of Reference manual
*/
static void configure_rxfifo_size(uint16_t size)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	80fb      	strh	r3, [r7, #6]
	size = 10 + (2* ((size/4) + 1));
 8000756:	88fb      	ldrh	r3, [r7, #6]
 8000758:	089b      	lsrs	r3, r3, #2
 800075a:	b29b      	uxth	r3, r3
 800075c:	3306      	adds	r3, #6
 800075e:	b29b      	uxth	r3, r3
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	80fb      	strh	r3, [r7, #6]

	//configures depth of FIFO
	MODIFY_REG(USB_OTG_HS->GRXFSIZ,
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <configure_rxfifo_size+0x34>)
 8000766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000768:	0c1b      	lsrs	r3, r3, #16
 800076a:	041b      	lsls	r3, r3, #16
 800076c:	88fa      	ldrh	r2, [r7, #6]
 800076e:	4904      	ldr	r1, [pc, #16]	; (8000780 <configure_rxfifo_size+0x34>)
 8000770:	4313      	orrs	r3, r2
 8000772:	624b      	str	r3, [r1, #36]	; 0x24
			   USB_OTG_GRXFSIZ_RXFD,
			   _VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 8000774:	f7ff ffa0 	bl	80006b8 <refresh_fifo_start_addresses>
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40040000 	.word	0x40040000

08000784 <configure_txfifo_size>:
 *  \param endpoint_number The number of the IN endpoint we want to confugre its TxFIFO
 *  \param size The size of the IN endpoint in bytes.
 *  \note Any change of any FIFO will update the registers of all TxFIFOs to adapt the start offsets
 */
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	80bb      	strh	r3, [r7, #4]
	size = (size + 3)/4;
 8000794:	88bb      	ldrh	r3, [r7, #4]
 8000796:	3303      	adds	r3, #3
 8000798:	2b00      	cmp	r3, #0
 800079a:	da00      	bge.n	800079e <configure_txfifo_size+0x1a>
 800079c:	3303      	adds	r3, #3
 800079e:	109b      	asrs	r3, r3, #2
 80007a0:	80bb      	strh	r3, [r7, #4]

	if(endpoint_number == 0)
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d108      	bne.n	80007ba <configure_txfifo_size+0x36>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 80007a8:	4b10      	ldr	r3, [pc, #64]	; (80007ec <configure_txfifo_size+0x68>)
 80007aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	88bb      	ldrh	r3, [r7, #4]
 80007b0:	041b      	lsls	r3, r3, #16
 80007b2:	490e      	ldr	r1, [pc, #56]	; (80007ec <configure_txfifo_size+0x68>)
 80007b4:	4313      	orrs	r3, r2
 80007b6:	628b      	str	r3, [r1, #40]	; 0x28
 80007b8:	e011      	b.n	80007de <configure_txfifo_size+0x5a>
				   USB_OTG_TX0FD,
				   _VAL2FLD(USB_OTG_TX0FD, size)
		);
	}
	else{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[endpoint_number - 1],
 80007ba:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <configure_txfifo_size+0x68>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	3b01      	subs	r3, #1
 80007c0:	3340      	adds	r3, #64	; 0x40
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	b299      	uxth	r1, r3
 80007ca:	88bb      	ldrh	r3, [r7, #4]
 80007cc:	041a      	lsls	r2, r3, #16
 80007ce:	4807      	ldr	r0, [pc, #28]	; (80007ec <configure_txfifo_size+0x68>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	3b01      	subs	r3, #1
 80007d4:	430a      	orrs	r2, r1
 80007d6:	3340      	adds	r3, #64	; 0x40
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	4403      	add	r3, r0
 80007dc:	605a      	str	r2, [r3, #4]
				   USB_OTG_NPTXFD,
				   _VAL2FLD(USB_OTG_NPTXFD, size)
		);
	}
	refresh_fifo_start_addresses();
 80007de:	f7ff ff6b 	bl	80006b8 <refresh_fifo_start_addresses>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40040000 	.word	0x40040000

080007f0 <read_packet>:


static void read_packet(void const *buffer, uint16_t size)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	807b      	strh	r3, [r7, #2]
	//remember there is only one RxFIFO
	uint32_t *fifo = FIFO(0);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fe85 	bl	800050c <FIFO>
 8000802:	6138      	str	r0, [r7, #16]

	for(; size >= 4; size -=4, buffer += 4)
 8000804:	e00b      	b.n	800081e <read_packet+0x2e>
	{
		//pop a 32-bit word of data ( untill less than one word remaining)
		uint32_t data = *fifo;
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	60fb      	str	r3, [r7, #12]

		//stores data in a buffer
		*((uint32_t*)buffer) = data;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	601a      	str	r2, [r3, #0]
	for(; size >= 4; size -=4, buffer += 4)
 8000812:	887b      	ldrh	r3, [r7, #2]
 8000814:	3b04      	subs	r3, #4
 8000816:	807b      	strh	r3, [r7, #2]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	3304      	adds	r3, #4
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	887b      	ldrh	r3, [r7, #2]
 8000820:	2b03      	cmp	r3, #3
 8000822:	d8f0      	bhi.n	8000806 <read_packet+0x16>
	}

	if(size > 0)
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d013      	beq.n	8000852 <read_packet+0x62>
	{
		//pops the last remaining bytes (which are less than one word).
		uint32_t data = *fifo;
 800082a:	693b      	ldr	r3, [r7, #16]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	617b      	str	r3, [r7, #20]
		for(; size > 0; size--, buffer++, data >>= 8)
 8000830:	e00c      	b.n	800084c <read_packet+0x5c>
		{
			//Stores the data in the buffer with the correct alignment.
			*((uint8_t*)buffer) = 0xFF & data;
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	b2da      	uxtb	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data >>= 8)
 800083a:	887b      	ldrh	r3, [r7, #2]
 800083c:	3b01      	subs	r3, #1
 800083e:	807b      	strh	r3, [r7, #2]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	3301      	adds	r3, #1
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	697b      	ldr	r3, [r7, #20]
 8000848:	0a1b      	lsrs	r3, r3, #8
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	887b      	ldrh	r3, [r7, #2]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ef      	bne.n	8000832 <read_packet+0x42>
		}
	}
}
 8000852:	bf00      	nop
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <write_packet>:
 * param endpoint_number The number of the endpoint where data will be written
 * param buffer Pointer to the buffer contains the data to be written to the endpoint
 * param size The size of data to be written in bytes.
 */
static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b084      	sub	sp, #16
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	6039      	str	r1, [r7, #0]
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	4613      	mov	r3, r2
 8000868:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 800086a:	79fb      	ldrb	r3, [r7, #7]
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fe4d 	bl	800050c <FIFO>
 8000872:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	4618      	mov	r0, r3
 8000878:	f7ff fe24 	bl	80004c4 <IN_ENDPOINT>
 800087c:	60b8      	str	r0, [r7, #8]

	//Configures the transmission (1 packet that has size bytes).
	MODIFY_REG(in_endpoint->DIEPTSIZ,
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	691b      	ldr	r3, [r3, #16]
 8000882:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8000886:	88bb      	ldrh	r3, [r7, #4]
 8000888:	4313      	orrs	r3, r2
 800088a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	611a      	str	r2, [r3, #16]
			   USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
			   _VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);

	// Enables the transmission after clearing both STALL and NAK of the endpoint
	MODIFY_REG(in_endpoint->DIEPCTL,
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 800089a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800089e:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	601a      	str	r2, [r3, #0]
			   USB_OTG_DIEPCTL_STALL,
			   USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA
	);

	// Get the size in terms of 32 it words
	size = (size+3) / 4;
 80008a6:	88bb      	ldrh	r3, [r7, #4]
 80008a8:	3303      	adds	r3, #3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da00      	bge.n	80008b0 <write_packet+0x56>
 80008ae:	3303      	adds	r3, #3
 80008b0:	109b      	asrs	r3, r3, #2
 80008b2:	80bb      	strh	r3, [r7, #4]

	for(; size > 0 ; size--, buffer += 4)
 80008b4:	e009      	b.n	80008ca <write_packet+0x70>
	{
		//push data to TxFIFO
		*fifo = *((uint32_t*)buffer);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	601a      	str	r2, [r3, #0]
	for(; size > 0 ; size--, buffer += 4)
 80008be:	88bb      	ldrh	r3, [r7, #4]
 80008c0:	3b01      	subs	r3, #1
 80008c2:	80bb      	strh	r3, [r7, #4]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	3304      	adds	r3, #4
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	88bb      	ldrh	r3, [r7, #4]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d1f2      	bne.n	80008b6 <write_packet+0x5c>
	}
}
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <flush_txfifo>:

//Flushes the TxFIFO buffer of an IN endpoint
// param endpoint_number The number of the IN endpoint to flush its TxFIFO buffer
static void flush_txfifo(uint8_t endpoint_number)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(USB_OTG_HS->GRSTCTL,
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <flush_txfifo+0x30>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	019b      	lsls	r3, r3, #6
 80008f2:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80008f6:	4313      	orrs	r3, r2
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <flush_txfifo+0x30>)
 80008fa:	f043 0320 	orr.w	r3, r3, #32
 80008fe:	6113      	str	r3, [r2, #16]
			   USB_OTG_GRSTCTL_TXFNUM,
			   _VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr
 800090c:	40040000 	.word	0x40040000

08000910 <configure_endpoint0>:

static void configure_endpoint0(uint8_t endpoint_size)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	71fb      	strb	r3, [r7, #7]
	//Unmask all interrupts of IN and OUT endpoint0
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << 0 | 1 << 16);
 800091a:	4b18      	ldr	r3, [pc, #96]	; (800097c <configure_endpoint0+0x6c>)
 800091c:	69db      	ldr	r3, [r3, #28]
 800091e:	4a17      	ldr	r2, [pc, #92]	; (800097c <configure_endpoint0+0x6c>)
 8000920:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8000924:	61d3      	str	r3, [r2, #28]

	//Configures the maximum packet size, activates the endpoint, and NAK the endpoint (cannot send data)
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,
 8000926:	2000      	movs	r0, #0
 8000928:	f7ff fdcc 	bl	80004c4 <IN_ENDPOINT>
 800092c:	4603      	mov	r3, r0
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000934:	f023 0307 	bic.w	r3, r3, #7
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	ea43 0402 	orr.w	r4, r3, r2
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff fdc0 	bl	80004c4 <IN_ENDPOINT>
 8000944:	4602      	mov	r2, r0
 8000946:	f044 6300 	orr.w	r3, r4, #134217728	; 0x8000000
 800094a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800094e:	6013      	str	r3, [r2, #0]
			   USB_OTG_DIEPCTL_MPSIZ,
			   USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK
			   );

	// Clears NAK, and enables endpoint data transmission
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,
 8000950:	2000      	movs	r0, #0
 8000952:	f7ff fdc9 	bl	80004e8 <OUT_ENDPOINT>
 8000956:	4603      	mov	r3, r0
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800095e:	601a      	str	r2, [r3, #0]
			USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_CNAK
			);

	configure_rxfifo_size(64); //Maximum size for USB FS
 8000960:	2040      	movs	r0, #64	; 0x40
 8000962:	f7ff fef3 	bl	800074c <configure_rxfifo_size>
	configure_txfifo_size(0, endpoint_size);
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	b29b      	uxth	r3, r3
 800096a:	4619      	mov	r1, r3
 800096c:	2000      	movs	r0, #0
 800096e:	f7ff ff09 	bl	8000784 <configure_txfifo_size>
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	bf00      	nop
 800097c:	40040800 	.word	0x40040800

08000980 <configure_in_endpoint>:

static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 8000980:	b590      	push	{r4, r7, lr}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]
 800098a:	460b      	mov	r3, r1
 800098c:	71bb      	strb	r3, [r7, #6]
 800098e:	4613      	mov	r3, r2
 8000990:	80bb      	strh	r3, [r7, #4]
	//Unmasks all interrupts of the targeted IN endpoint
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << endpoint_number);
 8000992:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <configure_in_endpoint+0x7c>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	79fa      	ldrb	r2, [r7, #7]
 8000998:	2101      	movs	r1, #1
 800099a:	fa01 f202 	lsl.w	r2, r1, r2
 800099e:	4611      	mov	r1, r2
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <configure_in_endpoint+0x7c>)
 80009a2:	430b      	orrs	r3, r1
 80009a4:	61d3      	str	r3, [r2, #28]

	//Activates the endpoint, sets endpoint handshake to NAK (not ready to send data), sets DATA0 packet
	//configures its type , its maximum packet size, and assigns it a TxFIFO.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fd8b 	bl	80004c4 <IN_ENDPOINT>
 80009ae:	4603      	mov	r3, r0
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <configure_in_endpoint+0x80>)
 80009b4:	4013      	ands	r3, r2
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	f3c2 010a 	ubfx	r1, r2, #0, #11
 80009bc:	79ba      	ldrb	r2, [r7, #6]
 80009be:	0492      	lsls	r2, r2, #18
 80009c0:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80009c4:	4311      	orrs	r1, r2
 80009c6:	79fa      	ldrb	r2, [r7, #7]
 80009c8:	0592      	lsls	r2, r2, #22
 80009ca:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 80009ce:	430a      	orrs	r2, r1
 80009d0:	ea43 0402 	orr.w	r4, r3, r2
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fd74 	bl	80004c4 <IN_ENDPOINT>
 80009dc:	4602      	mov	r2, r0
 80009de:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 80009e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009e6:	6013      	str	r3, [r2, #0]
			   USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_TXFNUM,
			   USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
			   _VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type)| _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 80009e8:	88ba      	ldrh	r2, [r7, #4]
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	4611      	mov	r1, r2
 80009ee:	4618      	mov	r0, r3
 80009f0:	f7ff fec8 	bl	8000784 <configure_txfifo_size>
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	40040800 	.word	0x40040800
 8000a00:	fc33f800 	.word	0xfc33f800

08000a04 <deconfigure_endpoint>:

static void deconfigure_endpoint(uint8_t endpoint_number)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fd57 	bl	80004c4 <IN_ENDPOINT>
 8000a16:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fd64 	bl	80004e8 <OUT_ENDPOINT>
 8000a20:	60b8      	str	r0, [r7, #8]

	//Masks all interrupts of the targeted IN and OUT endpoints
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK,
 8000a22:	4b26      	ldr	r3, [pc, #152]	; (8000abc <deconfigure_endpoint+0xb8>)
 8000a24:	69db      	ldr	r3, [r3, #28]
 8000a26:	79fa      	ldrb	r2, [r7, #7]
 8000a28:	2101      	movs	r1, #1
 8000a2a:	4091      	lsls	r1, r2
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000a32:	fa00 f202 	lsl.w	r2, r0, r2
 8000a36:	430a      	orrs	r2, r1
 8000a38:	43d2      	mvns	r2, r2
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <deconfigure_endpoint+0xb8>)
 8000a3e:	400b      	ands	r3, r1
 8000a40:	61d3      	str	r3, [r2, #28]
			  (1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	//clears all interrupts of the endpoint
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	689b      	ldr	r3, [r3, #8]
 8000a46:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000a4a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a4e:	68fa      	ldr	r2, [r7, #12]
 8000a50:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x715F);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f443 43e2 	orr.w	r3, r3, #28928	; 0x7100
 8000a5a:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	6093      	str	r3, [r2, #8]

	//disables the endpoints if possible
	if(in_endpoint->DIEPINT & USB_OTG_DIEPCTL_EPENA)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	689b      	ldr	r3, [r3, #8]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	da05      	bge.n	8000a76 <deconfigure_endpoint+0x72>
	{
		//Disables endpoint transmission
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	601a      	str	r2, [r3, #0]
	}

	//Deactivates the endpoint
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	601a      	str	r2, [r3, #0]

	if(endpoint_number != 0)
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d00f      	beq.n	8000aa8 <deconfigure_endpoint+0xa4>
	{
		if(out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000a88:	68bb      	ldr	r3, [r7, #8]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	da05      	bge.n	8000a9c <deconfigure_endpoint+0x98>
		{
			//Disables endpoint transmission
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	601a      	str	r2, [r3, #0]
		}
		//Deactivate endpoint
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	601a      	str	r2, [r3, #0]
	}

	flush_txfifo(endpoint_number);
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff ff16 	bl	80008dc <flush_txfifo>
	flush_rxfifo();
 8000ab0:	f7ff fdf2 	bl	8000698 <flush_rxfifo>
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	40040800 	.word	0x40040800

08000ac0 <usbrst_handler>:

static void usbrst_handler()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected.");
 8000ac6:	480b      	ldr	r0, [pc, #44]	; (8000af4 <usbrst_handler+0x34>)
 8000ac8:	f7ff fc78 	bl	80003bc <log_info>
	for(uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	71fb      	strb	r3, [r7, #7]
 8000ad0:	e006      	b.n	8000ae0 <usbrst_handler+0x20>
	{
		deconfigure_endpoint(i);
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f7ff ff95 	bl	8000a04 <deconfigure_endpoint>
	for(uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 8000ada:	79fb      	ldrb	r3, [r7, #7]
 8000adc:	3301      	adds	r3, #1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b06      	cmp	r3, #6
 8000ae4:	d9f5      	bls.n	8000ad2 <usbrst_handler+0x12>
	}

	usb_events.on_usb_reset_received();
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <usbrst_handler+0x38>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4798      	blx	r3
}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	08001e6c 	.word	0x08001e6c
 8000af8:	20000004 	.word	0x20000004

08000afc <enumdne_handler>:

//Enumeration done interrupt handler
//note Can be refactored to get packet size from framework layer.
static void enumdne_handler()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <enumdne_handler+0x14>)
 8000b02:	f7ff fc5b 	bl	80003bc <log_info>
	configure_endpoint0(8);
 8000b06:	2008      	movs	r0, #8
 8000b08:	f7ff ff02 	bl	8000910 <configure_endpoint0>
}
 8000b0c:	bf00      	nop
 8000b0e:	bd80      	pop	{r7, pc}
 8000b10:	08001e8c 	.word	0x08001e8c

08000b14 <rxflvl_handler>:

static void rxflvl_handler()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
	//Pop the status information word from the RxFIFO.
	uint32_t receive_status = USB_OTG_HS_GLOBAL->GRXSTSP;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <rxflvl_handler+0x90>)
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
 8000b1e:	60fb      	str	r3, [r7, #12]

	//endpoint that received the data
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	f003 030f 	and.w	r3, r3, #15
 8000b28:	72fb      	strb	r3, [r7, #11]
	// Count of bytes in the received packet
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	091b      	lsrs	r3, r3, #4
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b34:	813b      	strh	r3, [r7, #8]
	// Status of received packet
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	0c5b      	lsrs	r3, r3, #17
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f003 030f 	and.w	r3, r3, #15
 8000b40:	80fb      	strh	r3, [r7, #6]

	switch(pktsts)
 8000b42:	88fb      	ldrh	r3, [r7, #6]
 8000b44:	3b02      	subs	r3, #2
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	d828      	bhi.n	8000b9c <rxflvl_handler+0x88>
 8000b4a:	a201      	add	r2, pc, #4	; (adr r2, 8000b50 <rxflvl_handler+0x3c>)
 8000b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b50:	08000b9b 	.word	0x08000b9b
 8000b54:	08000b87 	.word	0x08000b87
 8000b58:	08000b73 	.word	0x08000b73
 8000b5c:	08000b9d 	.word	0x08000b9d
 8000b60:	08000b65 	.word	0x08000b65
	{
	case 0x06: //setup packet (followed by data)
		usb_events.on_setup_data_received(endpoint_number, bcnt);
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <rxflvl_handler+0x94>)
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	8939      	ldrh	r1, [r7, #8]
 8000b6a:	7afa      	ldrb	r2, [r7, #11]
 8000b6c:	4610      	mov	r0, r2
 8000b6e:	4798      	blx	r3
		break;
 8000b70:	e014      	b.n	8000b9c <rxflvl_handler+0x88>
	case 0x02:// OUT packet (includes data)
		//TODO
		break;
	case 0x04: // SETUP stage is complete
		//re-enable transmission on endpoint
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000b72:	7afb      	ldrb	r3, [r7, #11]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fcb7 	bl	80004e8 <OUT_ENDPOINT>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000b82:	601a      	str	r2, [r3, #0]
				USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
		break;
 8000b84:	e00a      	b.n	8000b9c <rxflvl_handler+0x88>
	case 0x03: // OUT transfer is complete
		//re-enable transmission on endpoint
		SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000b86:	7afb      	ldrb	r3, [r7, #11]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f7ff fcad 	bl	80004e8 <OUT_ENDPOINT>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000b96:	601a      	str	r2, [r3, #0]
			    USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
		break;
 8000b98:	e000      	b.n	8000b9c <rxflvl_handler+0x88>
		break;
 8000b9a:	bf00      	nop
	}
}
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40040000 	.word	0x40040000
 8000ba8:	20000004 	.word	0x20000004

08000bac <gintsts_handler>:



//handles USB core interrupts
static void gintsts_handler()
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0

	volatile uint32_t gintsts = USB_OTG_HS_GLOBAL->GINTSTS;
 8000bb2:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <gintsts_handler+0x74>)
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	607b      	str	r3, [r7, #4]

	if(gintsts & USB_OTG_GINTSTS_USBRST)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d008      	beq.n	8000bd4 <gintsts_handler+0x28>
	{
		usbrst_handler();
 8000bc2:	f7ff ff7d 	bl	8000ac0 <usbrst_handler>
		//Clears the interrupt
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000bc6:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <gintsts_handler+0x74>)
 8000bc8:	695b      	ldr	r3, [r3, #20]
 8000bca:	4a15      	ldr	r2, [pc, #84]	; (8000c20 <gintsts_handler+0x74>)
 8000bcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd0:	6153      	str	r3, [r2, #20]
	else if(gintsts & USB_OTG_GINTSTS_OEPINT)
	{

	}

}
 8000bd2:	e021      	b.n	8000c18 <gintsts_handler+0x6c>
	else if(gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d008      	beq.n	8000bf0 <gintsts_handler+0x44>
		enumdne_handler();
 8000bde:	f7ff ff8d 	bl	8000afc <enumdne_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <gintsts_handler+0x74>)
 8000be4:	695b      	ldr	r3, [r3, #20]
 8000be6:	4a0e      	ldr	r2, [pc, #56]	; (8000c20 <gintsts_handler+0x74>)
 8000be8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bec:	6153      	str	r3, [r2, #20]
}
 8000bee:	e013      	b.n	8000c18 <gintsts_handler+0x6c>
	else if(gintsts & USB_OTG_GINTSTS_RXFLVL)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0310 	and.w	r3, r3, #16
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d008      	beq.n	8000c0c <gintsts_handler+0x60>
		rxflvl_handler();
 8000bfa:	f7ff ff8b 	bl	8000b14 <rxflvl_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000bfe:	4b08      	ldr	r3, [pc, #32]	; (8000c20 <gintsts_handler+0x74>)
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <gintsts_handler+0x74>)
 8000c04:	f043 0310 	orr.w	r3, r3, #16
 8000c08:	6153      	str	r3, [r2, #20]
}
 8000c0a:	e005      	b.n	8000c18 <gintsts_handler+0x6c>
	else if(gintsts & USB_OTG_GINTSTS_IEPINT)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d100      	bne.n	8000c18 <gintsts_handler+0x6c>
	else if(gintsts & USB_OTG_GINTSTS_OEPINT)
 8000c16:	687b      	ldr	r3, [r7, #4]
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40040000 	.word	0x40040000

08000c24 <usbd_initialize>:
#include "usbd_driver.h"

static UsbDevice *usbd_handle;

void usbd_initialize(UsbDevice *usb_device)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	usbd_handle = usb_device;
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <usbd_initialize+0x28>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
	usb_driver.initialize_gpio_pins();
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <usbd_initialize+0x2c>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	4798      	blx	r3
	usb_driver.initialize_core();
 8000c38:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <usbd_initialize+0x2c>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4798      	blx	r3
	usb_driver.connect();
 8000c3e:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <usbd_initialize+0x2c>)
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	4798      	blx	r3
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200000d0 	.word	0x200000d0
 8000c50:	08001eb0 	.word	0x08001eb0

08000c54 <process_request>:

static void process_request()
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
	...

08000c64 <usbd_poll>:

void usbd_poll()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <usbd_poll+0x10>)
 8000c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6c:	4798      	blx	r3
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08001eb0 	.word	0x08001eb0

08000c78 <usb_reset_received_hanlder>:

static void usb_reset_received_hanlder()
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <usb_reset_received_hanlder+0x38>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size = 0;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <usb_reset_received_hanlder+0x38>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value = 0;
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <usb_reset_received_hanlder+0x38>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2200      	movs	r2, #0
 8000c92:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <usb_reset_received_hanlder+0x38>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <usb_reset_received_hanlder+0x38>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_address(0);
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <usb_reset_received_hanlder+0x3c>)
 8000ca6:	689b      	ldr	r3, [r3, #8]
 8000ca8:	2000      	movs	r0, #0
 8000caa:	4798      	blx	r3

}
 8000cac:	bf00      	nop
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000d0 	.word	0x200000d0
 8000cb4:	08001eb0 	.word	0x08001eb0

08000cb8 <setup_data_received_handler>:

static void setup_data_received_handler(uint8_t endpoint_number, uint16_t byte_count)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	71fb      	strb	r3, [r7, #7]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	usb_driver.read_packet(usbd_handle->ptr_out_buffer, byte_count);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <setup_data_received_handler+0x2c>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	4a06      	ldr	r2, [pc, #24]	; (8000ce8 <setup_data_received_handler+0x30>)
 8000cce:	6812      	ldr	r2, [r2, #0]
 8000cd0:	6852      	ldr	r2, [r2, #4]
 8000cd2:	88b9      	ldrh	r1, [r7, #4]
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4798      	blx	r3
	process_request();
 8000cd8:	f7ff ffbc 	bl	8000c54 <process_request>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08001eb0 	.word	0x08001eb0
 8000ce8:	200000d0 	.word	0x200000d0

08000cec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cf0:	f7ff fbe2 	bl	80004b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl SystemInit
 8000d1a:	f7ff fbcd 	bl	80004b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000d1e:	f000 f811 	bl	8000d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d22:	f7ff fb5f 	bl	80003e4 <main>

08000d26 <LoopForever>:

LoopForever:
    b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
  ldr   r0, =_estack
 8000d28:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000d34:	08001f7c 	.word	0x08001f7c
  ldr r2, =_sbss
 8000d38:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000d3c:	200000e8 	.word	0x200000e8

08000d40 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <__libc_init_array>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	4d0d      	ldr	r5, [pc, #52]	; (8000d7c <__libc_init_array+0x38>)
 8000d48:	4c0d      	ldr	r4, [pc, #52]	; (8000d80 <__libc_init_array+0x3c>)
 8000d4a:	1b64      	subs	r4, r4, r5
 8000d4c:	10a4      	asrs	r4, r4, #2
 8000d4e:	2600      	movs	r6, #0
 8000d50:	42a6      	cmp	r6, r4
 8000d52:	d109      	bne.n	8000d68 <__libc_init_array+0x24>
 8000d54:	4d0b      	ldr	r5, [pc, #44]	; (8000d84 <__libc_init_array+0x40>)
 8000d56:	4c0c      	ldr	r4, [pc, #48]	; (8000d88 <__libc_init_array+0x44>)
 8000d58:	f001 f84c 	bl	8001df4 <_init>
 8000d5c:	1b64      	subs	r4, r4, r5
 8000d5e:	10a4      	asrs	r4, r4, #2
 8000d60:	2600      	movs	r6, #0
 8000d62:	42a6      	cmp	r6, r4
 8000d64:	d105      	bne.n	8000d72 <__libc_init_array+0x2e>
 8000d66:	bd70      	pop	{r4, r5, r6, pc}
 8000d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6c:	4798      	blx	r3
 8000d6e:	3601      	adds	r6, #1
 8000d70:	e7ee      	b.n	8000d50 <__libc_init_array+0xc>
 8000d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d76:	4798      	blx	r3
 8000d78:	3601      	adds	r6, #1
 8000d7a:	e7f2      	b.n	8000d62 <__libc_init_array+0x1e>
 8000d7c:	08001f74 	.word	0x08001f74
 8000d80:	08001f74 	.word	0x08001f74
 8000d84:	08001f74 	.word	0x08001f74
 8000d88:	08001f78 	.word	0x08001f78

08000d8c <memset>:
 8000d8c:	4402      	add	r2, r0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d100      	bne.n	8000d96 <memset+0xa>
 8000d94:	4770      	bx	lr
 8000d96:	f803 1b01 	strb.w	r1, [r3], #1
 8000d9a:	e7f9      	b.n	8000d90 <memset+0x4>

08000d9c <__sfputc_r>:
 8000d9c:	6893      	ldr	r3, [r2, #8]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	b410      	push	{r4}
 8000da4:	6093      	str	r3, [r2, #8]
 8000da6:	da08      	bge.n	8000dba <__sfputc_r+0x1e>
 8000da8:	6994      	ldr	r4, [r2, #24]
 8000daa:	42a3      	cmp	r3, r4
 8000dac:	db01      	blt.n	8000db2 <__sfputc_r+0x16>
 8000dae:	290a      	cmp	r1, #10
 8000db0:	d103      	bne.n	8000dba <__sfputc_r+0x1e>
 8000db2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000db6:	f000 bb17 	b.w	80013e8 <__swbuf_r>
 8000dba:	6813      	ldr	r3, [r2, #0]
 8000dbc:	1c58      	adds	r0, r3, #1
 8000dbe:	6010      	str	r0, [r2, #0]
 8000dc0:	7019      	strb	r1, [r3, #0]
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <__sfputs_r>:
 8000dca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dcc:	4606      	mov	r6, r0
 8000dce:	460f      	mov	r7, r1
 8000dd0:	4614      	mov	r4, r2
 8000dd2:	18d5      	adds	r5, r2, r3
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d101      	bne.n	8000ddc <__sfputs_r+0x12>
 8000dd8:	2000      	movs	r0, #0
 8000dda:	e007      	b.n	8000dec <__sfputs_r+0x22>
 8000ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de0:	463a      	mov	r2, r7
 8000de2:	4630      	mov	r0, r6
 8000de4:	f7ff ffda 	bl	8000d9c <__sfputc_r>
 8000de8:	1c43      	adds	r3, r0, #1
 8000dea:	d1f3      	bne.n	8000dd4 <__sfputs_r+0xa>
 8000dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000df0 <_vfiprintf_r>:
 8000df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000df4:	460d      	mov	r5, r1
 8000df6:	b09d      	sub	sp, #116	; 0x74
 8000df8:	4614      	mov	r4, r2
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	b118      	cbz	r0, 8000e08 <_vfiprintf_r+0x18>
 8000e00:	6983      	ldr	r3, [r0, #24]
 8000e02:	b90b      	cbnz	r3, 8000e08 <_vfiprintf_r+0x18>
 8000e04:	f000 fcca 	bl	800179c <__sinit>
 8000e08:	4b89      	ldr	r3, [pc, #548]	; (8001030 <_vfiprintf_r+0x240>)
 8000e0a:	429d      	cmp	r5, r3
 8000e0c:	d11b      	bne.n	8000e46 <_vfiprintf_r+0x56>
 8000e0e:	6875      	ldr	r5, [r6, #4]
 8000e10:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e12:	07d9      	lsls	r1, r3, #31
 8000e14:	d405      	bmi.n	8000e22 <_vfiprintf_r+0x32>
 8000e16:	89ab      	ldrh	r3, [r5, #12]
 8000e18:	059a      	lsls	r2, r3, #22
 8000e1a:	d402      	bmi.n	8000e22 <_vfiprintf_r+0x32>
 8000e1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e1e:	f000 fd5b 	bl	80018d8 <__retarget_lock_acquire_recursive>
 8000e22:	89ab      	ldrh	r3, [r5, #12]
 8000e24:	071b      	lsls	r3, r3, #28
 8000e26:	d501      	bpl.n	8000e2c <_vfiprintf_r+0x3c>
 8000e28:	692b      	ldr	r3, [r5, #16]
 8000e2a:	b9eb      	cbnz	r3, 8000e68 <_vfiprintf_r+0x78>
 8000e2c:	4629      	mov	r1, r5
 8000e2e:	4630      	mov	r0, r6
 8000e30:	f000 fb2c 	bl	800148c <__swsetup_r>
 8000e34:	b1c0      	cbz	r0, 8000e68 <_vfiprintf_r+0x78>
 8000e36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e38:	07dc      	lsls	r4, r3, #31
 8000e3a:	d50e      	bpl.n	8000e5a <_vfiprintf_r+0x6a>
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	b01d      	add	sp, #116	; 0x74
 8000e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e46:	4b7b      	ldr	r3, [pc, #492]	; (8001034 <_vfiprintf_r+0x244>)
 8000e48:	429d      	cmp	r5, r3
 8000e4a:	d101      	bne.n	8000e50 <_vfiprintf_r+0x60>
 8000e4c:	68b5      	ldr	r5, [r6, #8]
 8000e4e:	e7df      	b.n	8000e10 <_vfiprintf_r+0x20>
 8000e50:	4b79      	ldr	r3, [pc, #484]	; (8001038 <_vfiprintf_r+0x248>)
 8000e52:	429d      	cmp	r5, r3
 8000e54:	bf08      	it	eq
 8000e56:	68f5      	ldreq	r5, [r6, #12]
 8000e58:	e7da      	b.n	8000e10 <_vfiprintf_r+0x20>
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	0598      	lsls	r0, r3, #22
 8000e5e:	d4ed      	bmi.n	8000e3c <_vfiprintf_r+0x4c>
 8000e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e62:	f000 fd3a 	bl	80018da <__retarget_lock_release_recursive>
 8000e66:	e7e9      	b.n	8000e3c <_vfiprintf_r+0x4c>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8000e6c:	2320      	movs	r3, #32
 8000e6e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e72:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e76:	2330      	movs	r3, #48	; 0x30
 8000e78:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800103c <_vfiprintf_r+0x24c>
 8000e7c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e80:	f04f 0901 	mov.w	r9, #1
 8000e84:	4623      	mov	r3, r4
 8000e86:	469a      	mov	sl, r3
 8000e88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e8c:	b10a      	cbz	r2, 8000e92 <_vfiprintf_r+0xa2>
 8000e8e:	2a25      	cmp	r2, #37	; 0x25
 8000e90:	d1f9      	bne.n	8000e86 <_vfiprintf_r+0x96>
 8000e92:	ebba 0b04 	subs.w	fp, sl, r4
 8000e96:	d00b      	beq.n	8000eb0 <_vfiprintf_r+0xc0>
 8000e98:	465b      	mov	r3, fp
 8000e9a:	4622      	mov	r2, r4
 8000e9c:	4629      	mov	r1, r5
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	f7ff ff93 	bl	8000dca <__sfputs_r>
 8000ea4:	3001      	adds	r0, #1
 8000ea6:	f000 80aa 	beq.w	8000ffe <_vfiprintf_r+0x20e>
 8000eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000eac:	445a      	add	r2, fp
 8000eae:	9209      	str	r2, [sp, #36]	; 0x24
 8000eb0:	f89a 3000 	ldrb.w	r3, [sl]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	f000 80a2 	beq.w	8000ffe <_vfiprintf_r+0x20e>
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ec4:	f10a 0a01 	add.w	sl, sl, #1
 8000ec8:	9304      	str	r3, [sp, #16]
 8000eca:	9307      	str	r3, [sp, #28]
 8000ecc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ed0:	931a      	str	r3, [sp, #104]	; 0x68
 8000ed2:	4654      	mov	r4, sl
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000eda:	4858      	ldr	r0, [pc, #352]	; (800103c <_vfiprintf_r+0x24c>)
 8000edc:	f7ff f988 	bl	80001f0 <memchr>
 8000ee0:	9a04      	ldr	r2, [sp, #16]
 8000ee2:	b9d8      	cbnz	r0, 8000f1c <_vfiprintf_r+0x12c>
 8000ee4:	06d1      	lsls	r1, r2, #27
 8000ee6:	bf44      	itt	mi
 8000ee8:	2320      	movmi	r3, #32
 8000eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000eee:	0713      	lsls	r3, r2, #28
 8000ef0:	bf44      	itt	mi
 8000ef2:	232b      	movmi	r3, #43	; 0x2b
 8000ef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000ef8:	f89a 3000 	ldrb.w	r3, [sl]
 8000efc:	2b2a      	cmp	r3, #42	; 0x2a
 8000efe:	d015      	beq.n	8000f2c <_vfiprintf_r+0x13c>
 8000f00:	9a07      	ldr	r2, [sp, #28]
 8000f02:	4654      	mov	r4, sl
 8000f04:	2000      	movs	r0, #0
 8000f06:	f04f 0c0a 	mov.w	ip, #10
 8000f0a:	4621      	mov	r1, r4
 8000f0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f10:	3b30      	subs	r3, #48	; 0x30
 8000f12:	2b09      	cmp	r3, #9
 8000f14:	d94e      	bls.n	8000fb4 <_vfiprintf_r+0x1c4>
 8000f16:	b1b0      	cbz	r0, 8000f46 <_vfiprintf_r+0x156>
 8000f18:	9207      	str	r2, [sp, #28]
 8000f1a:	e014      	b.n	8000f46 <_vfiprintf_r+0x156>
 8000f1c:	eba0 0308 	sub.w	r3, r0, r8
 8000f20:	fa09 f303 	lsl.w	r3, r9, r3
 8000f24:	4313      	orrs	r3, r2
 8000f26:	9304      	str	r3, [sp, #16]
 8000f28:	46a2      	mov	sl, r4
 8000f2a:	e7d2      	b.n	8000ed2 <_vfiprintf_r+0xe2>
 8000f2c:	9b03      	ldr	r3, [sp, #12]
 8000f2e:	1d19      	adds	r1, r3, #4
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	9103      	str	r1, [sp, #12]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bfbb      	ittet	lt
 8000f38:	425b      	neglt	r3, r3
 8000f3a:	f042 0202 	orrlt.w	r2, r2, #2
 8000f3e:	9307      	strge	r3, [sp, #28]
 8000f40:	9307      	strlt	r3, [sp, #28]
 8000f42:	bfb8      	it	lt
 8000f44:	9204      	strlt	r2, [sp, #16]
 8000f46:	7823      	ldrb	r3, [r4, #0]
 8000f48:	2b2e      	cmp	r3, #46	; 0x2e
 8000f4a:	d10c      	bne.n	8000f66 <_vfiprintf_r+0x176>
 8000f4c:	7863      	ldrb	r3, [r4, #1]
 8000f4e:	2b2a      	cmp	r3, #42	; 0x2a
 8000f50:	d135      	bne.n	8000fbe <_vfiprintf_r+0x1ce>
 8000f52:	9b03      	ldr	r3, [sp, #12]
 8000f54:	1d1a      	adds	r2, r3, #4
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	9203      	str	r2, [sp, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	bfb8      	it	lt
 8000f5e:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f62:	3402      	adds	r4, #2
 8000f64:	9305      	str	r3, [sp, #20]
 8000f66:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800104c <_vfiprintf_r+0x25c>
 8000f6a:	7821      	ldrb	r1, [r4, #0]
 8000f6c:	2203      	movs	r2, #3
 8000f6e:	4650      	mov	r0, sl
 8000f70:	f7ff f93e 	bl	80001f0 <memchr>
 8000f74:	b140      	cbz	r0, 8000f88 <_vfiprintf_r+0x198>
 8000f76:	2340      	movs	r3, #64	; 0x40
 8000f78:	eba0 000a 	sub.w	r0, r0, sl
 8000f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8000f80:	9b04      	ldr	r3, [sp, #16]
 8000f82:	4303      	orrs	r3, r0
 8000f84:	3401      	adds	r4, #1
 8000f86:	9304      	str	r3, [sp, #16]
 8000f88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <_vfiprintf_r+0x250>)
 8000f8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f92:	2206      	movs	r2, #6
 8000f94:	f7ff f92c 	bl	80001f0 <memchr>
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d03f      	beq.n	800101c <_vfiprintf_r+0x22c>
 8000f9c:	4b29      	ldr	r3, [pc, #164]	; (8001044 <_vfiprintf_r+0x254>)
 8000f9e:	bb1b      	cbnz	r3, 8000fe8 <_vfiprintf_r+0x1f8>
 8000fa0:	9b03      	ldr	r3, [sp, #12]
 8000fa2:	3307      	adds	r3, #7
 8000fa4:	f023 0307 	bic.w	r3, r3, #7
 8000fa8:	3308      	adds	r3, #8
 8000faa:	9303      	str	r3, [sp, #12]
 8000fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fae:	443b      	add	r3, r7
 8000fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb2:	e767      	b.n	8000e84 <_vfiprintf_r+0x94>
 8000fb4:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fb8:	460c      	mov	r4, r1
 8000fba:	2001      	movs	r0, #1
 8000fbc:	e7a5      	b.n	8000f0a <_vfiprintf_r+0x11a>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	3401      	adds	r4, #1
 8000fc2:	9305      	str	r3, [sp, #20]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0c0a 	mov.w	ip, #10
 8000fca:	4620      	mov	r0, r4
 8000fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000fd0:	3a30      	subs	r2, #48	; 0x30
 8000fd2:	2a09      	cmp	r2, #9
 8000fd4:	d903      	bls.n	8000fde <_vfiprintf_r+0x1ee>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0c5      	beq.n	8000f66 <_vfiprintf_r+0x176>
 8000fda:	9105      	str	r1, [sp, #20]
 8000fdc:	e7c3      	b.n	8000f66 <_vfiprintf_r+0x176>
 8000fde:	fb0c 2101 	mla	r1, ip, r1, r2
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e7f0      	b.n	8000fca <_vfiprintf_r+0x1da>
 8000fe8:	ab03      	add	r3, sp, #12
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	462a      	mov	r2, r5
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <_vfiprintf_r+0x258>)
 8000ff0:	a904      	add	r1, sp, #16
 8000ff2:	4630      	mov	r0, r6
 8000ff4:	f3af 8000 	nop.w
 8000ff8:	4607      	mov	r7, r0
 8000ffa:	1c78      	adds	r0, r7, #1
 8000ffc:	d1d6      	bne.n	8000fac <_vfiprintf_r+0x1bc>
 8000ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001000:	07d9      	lsls	r1, r3, #31
 8001002:	d405      	bmi.n	8001010 <_vfiprintf_r+0x220>
 8001004:	89ab      	ldrh	r3, [r5, #12]
 8001006:	059a      	lsls	r2, r3, #22
 8001008:	d402      	bmi.n	8001010 <_vfiprintf_r+0x220>
 800100a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800100c:	f000 fc65 	bl	80018da <__retarget_lock_release_recursive>
 8001010:	89ab      	ldrh	r3, [r5, #12]
 8001012:	065b      	lsls	r3, r3, #25
 8001014:	f53f af12 	bmi.w	8000e3c <_vfiprintf_r+0x4c>
 8001018:	9809      	ldr	r0, [sp, #36]	; 0x24
 800101a:	e711      	b.n	8000e40 <_vfiprintf_r+0x50>
 800101c:	ab03      	add	r3, sp, #12
 800101e:	9300      	str	r3, [sp, #0]
 8001020:	462a      	mov	r2, r5
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <_vfiprintf_r+0x258>)
 8001024:	a904      	add	r1, sp, #16
 8001026:	4630      	mov	r0, r6
 8001028:	f000 f88a 	bl	8001140 <_printf_i>
 800102c:	e7e4      	b.n	8000ff8 <_vfiprintf_r+0x208>
 800102e:	bf00      	nop
 8001030:	08001f34 	.word	0x08001f34
 8001034:	08001f54 	.word	0x08001f54
 8001038:	08001f14 	.word	0x08001f14
 800103c:	08001ee0 	.word	0x08001ee0
 8001040:	08001eea 	.word	0x08001eea
 8001044:	00000000 	.word	0x00000000
 8001048:	08000dcb 	.word	0x08000dcb
 800104c:	08001ee6 	.word	0x08001ee6

08001050 <vfiprintf>:
 8001050:	4613      	mov	r3, r2
 8001052:	460a      	mov	r2, r1
 8001054:	4601      	mov	r1, r0
 8001056:	4802      	ldr	r0, [pc, #8]	; (8001060 <vfiprintf+0x10>)
 8001058:	6800      	ldr	r0, [r0, #0]
 800105a:	f7ff bec9 	b.w	8000df0 <_vfiprintf_r>
 800105e:	bf00      	nop
 8001060:	2000001c 	.word	0x2000001c

08001064 <_printf_common>:
 8001064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001068:	4616      	mov	r6, r2
 800106a:	4699      	mov	r9, r3
 800106c:	688a      	ldr	r2, [r1, #8]
 800106e:	690b      	ldr	r3, [r1, #16]
 8001070:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001074:	4293      	cmp	r3, r2
 8001076:	bfb8      	it	lt
 8001078:	4613      	movlt	r3, r2
 800107a:	6033      	str	r3, [r6, #0]
 800107c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001080:	4607      	mov	r7, r0
 8001082:	460c      	mov	r4, r1
 8001084:	b10a      	cbz	r2, 800108a <_printf_common+0x26>
 8001086:	3301      	adds	r3, #1
 8001088:	6033      	str	r3, [r6, #0]
 800108a:	6823      	ldr	r3, [r4, #0]
 800108c:	0699      	lsls	r1, r3, #26
 800108e:	bf42      	ittt	mi
 8001090:	6833      	ldrmi	r3, [r6, #0]
 8001092:	3302      	addmi	r3, #2
 8001094:	6033      	strmi	r3, [r6, #0]
 8001096:	6825      	ldr	r5, [r4, #0]
 8001098:	f015 0506 	ands.w	r5, r5, #6
 800109c:	d106      	bne.n	80010ac <_printf_common+0x48>
 800109e:	f104 0a19 	add.w	sl, r4, #25
 80010a2:	68e3      	ldr	r3, [r4, #12]
 80010a4:	6832      	ldr	r2, [r6, #0]
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	42ab      	cmp	r3, r5
 80010aa:	dc26      	bgt.n	80010fa <_printf_common+0x96>
 80010ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010b0:	1e13      	subs	r3, r2, #0
 80010b2:	6822      	ldr	r2, [r4, #0]
 80010b4:	bf18      	it	ne
 80010b6:	2301      	movne	r3, #1
 80010b8:	0692      	lsls	r2, r2, #26
 80010ba:	d42b      	bmi.n	8001114 <_printf_common+0xb0>
 80010bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010c0:	4649      	mov	r1, r9
 80010c2:	4638      	mov	r0, r7
 80010c4:	47c0      	blx	r8
 80010c6:	3001      	adds	r0, #1
 80010c8:	d01e      	beq.n	8001108 <_printf_common+0xa4>
 80010ca:	6823      	ldr	r3, [r4, #0]
 80010cc:	68e5      	ldr	r5, [r4, #12]
 80010ce:	6832      	ldr	r2, [r6, #0]
 80010d0:	f003 0306 	and.w	r3, r3, #6
 80010d4:	2b04      	cmp	r3, #4
 80010d6:	bf08      	it	eq
 80010d8:	1aad      	subeq	r5, r5, r2
 80010da:	68a3      	ldr	r3, [r4, #8]
 80010dc:	6922      	ldr	r2, [r4, #16]
 80010de:	bf0c      	ite	eq
 80010e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010e4:	2500      	movne	r5, #0
 80010e6:	4293      	cmp	r3, r2
 80010e8:	bfc4      	itt	gt
 80010ea:	1a9b      	subgt	r3, r3, r2
 80010ec:	18ed      	addgt	r5, r5, r3
 80010ee:	2600      	movs	r6, #0
 80010f0:	341a      	adds	r4, #26
 80010f2:	42b5      	cmp	r5, r6
 80010f4:	d11a      	bne.n	800112c <_printf_common+0xc8>
 80010f6:	2000      	movs	r0, #0
 80010f8:	e008      	b.n	800110c <_printf_common+0xa8>
 80010fa:	2301      	movs	r3, #1
 80010fc:	4652      	mov	r2, sl
 80010fe:	4649      	mov	r1, r9
 8001100:	4638      	mov	r0, r7
 8001102:	47c0      	blx	r8
 8001104:	3001      	adds	r0, #1
 8001106:	d103      	bne.n	8001110 <_printf_common+0xac>
 8001108:	f04f 30ff 	mov.w	r0, #4294967295
 800110c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001110:	3501      	adds	r5, #1
 8001112:	e7c6      	b.n	80010a2 <_printf_common+0x3e>
 8001114:	18e1      	adds	r1, r4, r3
 8001116:	1c5a      	adds	r2, r3, #1
 8001118:	2030      	movs	r0, #48	; 0x30
 800111a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800111e:	4422      	add	r2, r4
 8001120:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001124:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001128:	3302      	adds	r3, #2
 800112a:	e7c7      	b.n	80010bc <_printf_common+0x58>
 800112c:	2301      	movs	r3, #1
 800112e:	4622      	mov	r2, r4
 8001130:	4649      	mov	r1, r9
 8001132:	4638      	mov	r0, r7
 8001134:	47c0      	blx	r8
 8001136:	3001      	adds	r0, #1
 8001138:	d0e6      	beq.n	8001108 <_printf_common+0xa4>
 800113a:	3601      	adds	r6, #1
 800113c:	e7d9      	b.n	80010f2 <_printf_common+0x8e>
	...

08001140 <_printf_i>:
 8001140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001144:	7e0f      	ldrb	r7, [r1, #24]
 8001146:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001148:	2f78      	cmp	r7, #120	; 0x78
 800114a:	4691      	mov	r9, r2
 800114c:	4680      	mov	r8, r0
 800114e:	460c      	mov	r4, r1
 8001150:	469a      	mov	sl, r3
 8001152:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001156:	d807      	bhi.n	8001168 <_printf_i+0x28>
 8001158:	2f62      	cmp	r7, #98	; 0x62
 800115a:	d80a      	bhi.n	8001172 <_printf_i+0x32>
 800115c:	2f00      	cmp	r7, #0
 800115e:	f000 80d8 	beq.w	8001312 <_printf_i+0x1d2>
 8001162:	2f58      	cmp	r7, #88	; 0x58
 8001164:	f000 80a3 	beq.w	80012ae <_printf_i+0x16e>
 8001168:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800116c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001170:	e03a      	b.n	80011e8 <_printf_i+0xa8>
 8001172:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001176:	2b15      	cmp	r3, #21
 8001178:	d8f6      	bhi.n	8001168 <_printf_i+0x28>
 800117a:	a101      	add	r1, pc, #4	; (adr r1, 8001180 <_printf_i+0x40>)
 800117c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001180:	080011d9 	.word	0x080011d9
 8001184:	080011ed 	.word	0x080011ed
 8001188:	08001169 	.word	0x08001169
 800118c:	08001169 	.word	0x08001169
 8001190:	08001169 	.word	0x08001169
 8001194:	08001169 	.word	0x08001169
 8001198:	080011ed 	.word	0x080011ed
 800119c:	08001169 	.word	0x08001169
 80011a0:	08001169 	.word	0x08001169
 80011a4:	08001169 	.word	0x08001169
 80011a8:	08001169 	.word	0x08001169
 80011ac:	080012f9 	.word	0x080012f9
 80011b0:	0800121d 	.word	0x0800121d
 80011b4:	080012db 	.word	0x080012db
 80011b8:	08001169 	.word	0x08001169
 80011bc:	08001169 	.word	0x08001169
 80011c0:	0800131b 	.word	0x0800131b
 80011c4:	08001169 	.word	0x08001169
 80011c8:	0800121d 	.word	0x0800121d
 80011cc:	08001169 	.word	0x08001169
 80011d0:	08001169 	.word	0x08001169
 80011d4:	080012e3 	.word	0x080012e3
 80011d8:	682b      	ldr	r3, [r5, #0]
 80011da:	1d1a      	adds	r2, r3, #4
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	602a      	str	r2, [r5, #0]
 80011e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0a3      	b.n	8001334 <_printf_i+0x1f4>
 80011ec:	6820      	ldr	r0, [r4, #0]
 80011ee:	6829      	ldr	r1, [r5, #0]
 80011f0:	0606      	lsls	r6, r0, #24
 80011f2:	f101 0304 	add.w	r3, r1, #4
 80011f6:	d50a      	bpl.n	800120e <_printf_i+0xce>
 80011f8:	680e      	ldr	r6, [r1, #0]
 80011fa:	602b      	str	r3, [r5, #0]
 80011fc:	2e00      	cmp	r6, #0
 80011fe:	da03      	bge.n	8001208 <_printf_i+0xc8>
 8001200:	232d      	movs	r3, #45	; 0x2d
 8001202:	4276      	negs	r6, r6
 8001204:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001208:	485e      	ldr	r0, [pc, #376]	; (8001384 <_printf_i+0x244>)
 800120a:	230a      	movs	r3, #10
 800120c:	e019      	b.n	8001242 <_printf_i+0x102>
 800120e:	680e      	ldr	r6, [r1, #0]
 8001210:	602b      	str	r3, [r5, #0]
 8001212:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001216:	bf18      	it	ne
 8001218:	b236      	sxthne	r6, r6
 800121a:	e7ef      	b.n	80011fc <_printf_i+0xbc>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	1d19      	adds	r1, r3, #4
 8001222:	6029      	str	r1, [r5, #0]
 8001224:	0601      	lsls	r1, r0, #24
 8001226:	d501      	bpl.n	800122c <_printf_i+0xec>
 8001228:	681e      	ldr	r6, [r3, #0]
 800122a:	e002      	b.n	8001232 <_printf_i+0xf2>
 800122c:	0646      	lsls	r6, r0, #25
 800122e:	d5fb      	bpl.n	8001228 <_printf_i+0xe8>
 8001230:	881e      	ldrh	r6, [r3, #0]
 8001232:	4854      	ldr	r0, [pc, #336]	; (8001384 <_printf_i+0x244>)
 8001234:	2f6f      	cmp	r7, #111	; 0x6f
 8001236:	bf0c      	ite	eq
 8001238:	2308      	moveq	r3, #8
 800123a:	230a      	movne	r3, #10
 800123c:	2100      	movs	r1, #0
 800123e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001242:	6865      	ldr	r5, [r4, #4]
 8001244:	60a5      	str	r5, [r4, #8]
 8001246:	2d00      	cmp	r5, #0
 8001248:	bfa2      	ittt	ge
 800124a:	6821      	ldrge	r1, [r4, #0]
 800124c:	f021 0104 	bicge.w	r1, r1, #4
 8001250:	6021      	strge	r1, [r4, #0]
 8001252:	b90e      	cbnz	r6, 8001258 <_printf_i+0x118>
 8001254:	2d00      	cmp	r5, #0
 8001256:	d04d      	beq.n	80012f4 <_printf_i+0x1b4>
 8001258:	4615      	mov	r5, r2
 800125a:	fbb6 f1f3 	udiv	r1, r6, r3
 800125e:	fb03 6711 	mls	r7, r3, r1, r6
 8001262:	5dc7      	ldrb	r7, [r0, r7]
 8001264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001268:	4637      	mov	r7, r6
 800126a:	42bb      	cmp	r3, r7
 800126c:	460e      	mov	r6, r1
 800126e:	d9f4      	bls.n	800125a <_printf_i+0x11a>
 8001270:	2b08      	cmp	r3, #8
 8001272:	d10b      	bne.n	800128c <_printf_i+0x14c>
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	07de      	lsls	r6, r3, #31
 8001278:	d508      	bpl.n	800128c <_printf_i+0x14c>
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	6861      	ldr	r1, [r4, #4]
 800127e:	4299      	cmp	r1, r3
 8001280:	bfde      	ittt	le
 8001282:	2330      	movle	r3, #48	; 0x30
 8001284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800128c:	1b52      	subs	r2, r2, r5
 800128e:	6122      	str	r2, [r4, #16]
 8001290:	f8cd a000 	str.w	sl, [sp]
 8001294:	464b      	mov	r3, r9
 8001296:	aa03      	add	r2, sp, #12
 8001298:	4621      	mov	r1, r4
 800129a:	4640      	mov	r0, r8
 800129c:	f7ff fee2 	bl	8001064 <_printf_common>
 80012a0:	3001      	adds	r0, #1
 80012a2:	d14c      	bne.n	800133e <_printf_i+0x1fe>
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	b004      	add	sp, #16
 80012aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ae:	4835      	ldr	r0, [pc, #212]	; (8001384 <_printf_i+0x244>)
 80012b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80012b4:	6829      	ldr	r1, [r5, #0]
 80012b6:	6823      	ldr	r3, [r4, #0]
 80012b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80012bc:	6029      	str	r1, [r5, #0]
 80012be:	061d      	lsls	r5, r3, #24
 80012c0:	d514      	bpl.n	80012ec <_printf_i+0x1ac>
 80012c2:	07df      	lsls	r7, r3, #31
 80012c4:	bf44      	itt	mi
 80012c6:	f043 0320 	orrmi.w	r3, r3, #32
 80012ca:	6023      	strmi	r3, [r4, #0]
 80012cc:	b91e      	cbnz	r6, 80012d6 <_printf_i+0x196>
 80012ce:	6823      	ldr	r3, [r4, #0]
 80012d0:	f023 0320 	bic.w	r3, r3, #32
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	2310      	movs	r3, #16
 80012d8:	e7b0      	b.n	800123c <_printf_i+0xfc>
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	f043 0320 	orr.w	r3, r3, #32
 80012e0:	6023      	str	r3, [r4, #0]
 80012e2:	2378      	movs	r3, #120	; 0x78
 80012e4:	4828      	ldr	r0, [pc, #160]	; (8001388 <_printf_i+0x248>)
 80012e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012ea:	e7e3      	b.n	80012b4 <_printf_i+0x174>
 80012ec:	0659      	lsls	r1, r3, #25
 80012ee:	bf48      	it	mi
 80012f0:	b2b6      	uxthmi	r6, r6
 80012f2:	e7e6      	b.n	80012c2 <_printf_i+0x182>
 80012f4:	4615      	mov	r5, r2
 80012f6:	e7bb      	b.n	8001270 <_printf_i+0x130>
 80012f8:	682b      	ldr	r3, [r5, #0]
 80012fa:	6826      	ldr	r6, [r4, #0]
 80012fc:	6961      	ldr	r1, [r4, #20]
 80012fe:	1d18      	adds	r0, r3, #4
 8001300:	6028      	str	r0, [r5, #0]
 8001302:	0635      	lsls	r5, r6, #24
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	d501      	bpl.n	800130c <_printf_i+0x1cc>
 8001308:	6019      	str	r1, [r3, #0]
 800130a:	e002      	b.n	8001312 <_printf_i+0x1d2>
 800130c:	0670      	lsls	r0, r6, #25
 800130e:	d5fb      	bpl.n	8001308 <_printf_i+0x1c8>
 8001310:	8019      	strh	r1, [r3, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	6123      	str	r3, [r4, #16]
 8001316:	4615      	mov	r5, r2
 8001318:	e7ba      	b.n	8001290 <_printf_i+0x150>
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	1d1a      	adds	r2, r3, #4
 800131e:	602a      	str	r2, [r5, #0]
 8001320:	681d      	ldr	r5, [r3, #0]
 8001322:	6862      	ldr	r2, [r4, #4]
 8001324:	2100      	movs	r1, #0
 8001326:	4628      	mov	r0, r5
 8001328:	f7fe ff62 	bl	80001f0 <memchr>
 800132c:	b108      	cbz	r0, 8001332 <_printf_i+0x1f2>
 800132e:	1b40      	subs	r0, r0, r5
 8001330:	6060      	str	r0, [r4, #4]
 8001332:	6863      	ldr	r3, [r4, #4]
 8001334:	6123      	str	r3, [r4, #16]
 8001336:	2300      	movs	r3, #0
 8001338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800133c:	e7a8      	b.n	8001290 <_printf_i+0x150>
 800133e:	6923      	ldr	r3, [r4, #16]
 8001340:	462a      	mov	r2, r5
 8001342:	4649      	mov	r1, r9
 8001344:	4640      	mov	r0, r8
 8001346:	47d0      	blx	sl
 8001348:	3001      	adds	r0, #1
 800134a:	d0ab      	beq.n	80012a4 <_printf_i+0x164>
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	079b      	lsls	r3, r3, #30
 8001350:	d413      	bmi.n	800137a <_printf_i+0x23a>
 8001352:	68e0      	ldr	r0, [r4, #12]
 8001354:	9b03      	ldr	r3, [sp, #12]
 8001356:	4298      	cmp	r0, r3
 8001358:	bfb8      	it	lt
 800135a:	4618      	movlt	r0, r3
 800135c:	e7a4      	b.n	80012a8 <_printf_i+0x168>
 800135e:	2301      	movs	r3, #1
 8001360:	4632      	mov	r2, r6
 8001362:	4649      	mov	r1, r9
 8001364:	4640      	mov	r0, r8
 8001366:	47d0      	blx	sl
 8001368:	3001      	adds	r0, #1
 800136a:	d09b      	beq.n	80012a4 <_printf_i+0x164>
 800136c:	3501      	adds	r5, #1
 800136e:	68e3      	ldr	r3, [r4, #12]
 8001370:	9903      	ldr	r1, [sp, #12]
 8001372:	1a5b      	subs	r3, r3, r1
 8001374:	42ab      	cmp	r3, r5
 8001376:	dcf2      	bgt.n	800135e <_printf_i+0x21e>
 8001378:	e7eb      	b.n	8001352 <_printf_i+0x212>
 800137a:	2500      	movs	r5, #0
 800137c:	f104 0619 	add.w	r6, r4, #25
 8001380:	e7f5      	b.n	800136e <_printf_i+0x22e>
 8001382:	bf00      	nop
 8001384:	08001ef1 	.word	0x08001ef1
 8001388:	08001f02 	.word	0x08001f02

0800138c <iprintf>:
 800138c:	b40f      	push	{r0, r1, r2, r3}
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <iprintf+0x2c>)
 8001390:	b513      	push	{r0, r1, r4, lr}
 8001392:	681c      	ldr	r4, [r3, #0]
 8001394:	b124      	cbz	r4, 80013a0 <iprintf+0x14>
 8001396:	69a3      	ldr	r3, [r4, #24]
 8001398:	b913      	cbnz	r3, 80013a0 <iprintf+0x14>
 800139a:	4620      	mov	r0, r4
 800139c:	f000 f9fe 	bl	800179c <__sinit>
 80013a0:	ab05      	add	r3, sp, #20
 80013a2:	9a04      	ldr	r2, [sp, #16]
 80013a4:	68a1      	ldr	r1, [r4, #8]
 80013a6:	9301      	str	r3, [sp, #4]
 80013a8:	4620      	mov	r0, r4
 80013aa:	f7ff fd21 	bl	8000df0 <_vfiprintf_r>
 80013ae:	b002      	add	sp, #8
 80013b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013b4:	b004      	add	sp, #16
 80013b6:	4770      	bx	lr
 80013b8:	2000001c 	.word	0x2000001c

080013bc <putchar>:
 80013bc:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <putchar+0x28>)
 80013be:	b513      	push	{r0, r1, r4, lr}
 80013c0:	681c      	ldr	r4, [r3, #0]
 80013c2:	4601      	mov	r1, r0
 80013c4:	b134      	cbz	r4, 80013d4 <putchar+0x18>
 80013c6:	69a3      	ldr	r3, [r4, #24]
 80013c8:	b923      	cbnz	r3, 80013d4 <putchar+0x18>
 80013ca:	9001      	str	r0, [sp, #4]
 80013cc:	4620      	mov	r0, r4
 80013ce:	f000 f9e5 	bl	800179c <__sinit>
 80013d2:	9901      	ldr	r1, [sp, #4]
 80013d4:	68a2      	ldr	r2, [r4, #8]
 80013d6:	4620      	mov	r0, r4
 80013d8:	b002      	add	sp, #8
 80013da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013de:	f000 bbc3 	b.w	8001b68 <_putc_r>
 80013e2:	bf00      	nop
 80013e4:	2000001c 	.word	0x2000001c

080013e8 <__swbuf_r>:
 80013e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ea:	460e      	mov	r6, r1
 80013ec:	4614      	mov	r4, r2
 80013ee:	4605      	mov	r5, r0
 80013f0:	b118      	cbz	r0, 80013fa <__swbuf_r+0x12>
 80013f2:	6983      	ldr	r3, [r0, #24]
 80013f4:	b90b      	cbnz	r3, 80013fa <__swbuf_r+0x12>
 80013f6:	f000 f9d1 	bl	800179c <__sinit>
 80013fa:	4b21      	ldr	r3, [pc, #132]	; (8001480 <__swbuf_r+0x98>)
 80013fc:	429c      	cmp	r4, r3
 80013fe:	d12b      	bne.n	8001458 <__swbuf_r+0x70>
 8001400:	686c      	ldr	r4, [r5, #4]
 8001402:	69a3      	ldr	r3, [r4, #24]
 8001404:	60a3      	str	r3, [r4, #8]
 8001406:	89a3      	ldrh	r3, [r4, #12]
 8001408:	071a      	lsls	r2, r3, #28
 800140a:	d52f      	bpl.n	800146c <__swbuf_r+0x84>
 800140c:	6923      	ldr	r3, [r4, #16]
 800140e:	b36b      	cbz	r3, 800146c <__swbuf_r+0x84>
 8001410:	6923      	ldr	r3, [r4, #16]
 8001412:	6820      	ldr	r0, [r4, #0]
 8001414:	1ac0      	subs	r0, r0, r3
 8001416:	6963      	ldr	r3, [r4, #20]
 8001418:	b2f6      	uxtb	r6, r6
 800141a:	4283      	cmp	r3, r0
 800141c:	4637      	mov	r7, r6
 800141e:	dc04      	bgt.n	800142a <__swbuf_r+0x42>
 8001420:	4621      	mov	r1, r4
 8001422:	4628      	mov	r0, r5
 8001424:	f000 f926 	bl	8001674 <_fflush_r>
 8001428:	bb30      	cbnz	r0, 8001478 <__swbuf_r+0x90>
 800142a:	68a3      	ldr	r3, [r4, #8]
 800142c:	3b01      	subs	r3, #1
 800142e:	60a3      	str	r3, [r4, #8]
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	6022      	str	r2, [r4, #0]
 8001436:	701e      	strb	r6, [r3, #0]
 8001438:	6963      	ldr	r3, [r4, #20]
 800143a:	3001      	adds	r0, #1
 800143c:	4283      	cmp	r3, r0
 800143e:	d004      	beq.n	800144a <__swbuf_r+0x62>
 8001440:	89a3      	ldrh	r3, [r4, #12]
 8001442:	07db      	lsls	r3, r3, #31
 8001444:	d506      	bpl.n	8001454 <__swbuf_r+0x6c>
 8001446:	2e0a      	cmp	r6, #10
 8001448:	d104      	bne.n	8001454 <__swbuf_r+0x6c>
 800144a:	4621      	mov	r1, r4
 800144c:	4628      	mov	r0, r5
 800144e:	f000 f911 	bl	8001674 <_fflush_r>
 8001452:	b988      	cbnz	r0, 8001478 <__swbuf_r+0x90>
 8001454:	4638      	mov	r0, r7
 8001456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <__swbuf_r+0x9c>)
 800145a:	429c      	cmp	r4, r3
 800145c:	d101      	bne.n	8001462 <__swbuf_r+0x7a>
 800145e:	68ac      	ldr	r4, [r5, #8]
 8001460:	e7cf      	b.n	8001402 <__swbuf_r+0x1a>
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <__swbuf_r+0xa0>)
 8001464:	429c      	cmp	r4, r3
 8001466:	bf08      	it	eq
 8001468:	68ec      	ldreq	r4, [r5, #12]
 800146a:	e7ca      	b.n	8001402 <__swbuf_r+0x1a>
 800146c:	4621      	mov	r1, r4
 800146e:	4628      	mov	r0, r5
 8001470:	f000 f80c 	bl	800148c <__swsetup_r>
 8001474:	2800      	cmp	r0, #0
 8001476:	d0cb      	beq.n	8001410 <__swbuf_r+0x28>
 8001478:	f04f 37ff 	mov.w	r7, #4294967295
 800147c:	e7ea      	b.n	8001454 <__swbuf_r+0x6c>
 800147e:	bf00      	nop
 8001480:	08001f34 	.word	0x08001f34
 8001484:	08001f54 	.word	0x08001f54
 8001488:	08001f14 	.word	0x08001f14

0800148c <__swsetup_r>:
 800148c:	4b32      	ldr	r3, [pc, #200]	; (8001558 <__swsetup_r+0xcc>)
 800148e:	b570      	push	{r4, r5, r6, lr}
 8001490:	681d      	ldr	r5, [r3, #0]
 8001492:	4606      	mov	r6, r0
 8001494:	460c      	mov	r4, r1
 8001496:	b125      	cbz	r5, 80014a2 <__swsetup_r+0x16>
 8001498:	69ab      	ldr	r3, [r5, #24]
 800149a:	b913      	cbnz	r3, 80014a2 <__swsetup_r+0x16>
 800149c:	4628      	mov	r0, r5
 800149e:	f000 f97d 	bl	800179c <__sinit>
 80014a2:	4b2e      	ldr	r3, [pc, #184]	; (800155c <__swsetup_r+0xd0>)
 80014a4:	429c      	cmp	r4, r3
 80014a6:	d10f      	bne.n	80014c8 <__swsetup_r+0x3c>
 80014a8:	686c      	ldr	r4, [r5, #4]
 80014aa:	89a3      	ldrh	r3, [r4, #12]
 80014ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80014b0:	0719      	lsls	r1, r3, #28
 80014b2:	d42c      	bmi.n	800150e <__swsetup_r+0x82>
 80014b4:	06dd      	lsls	r5, r3, #27
 80014b6:	d411      	bmi.n	80014dc <__swsetup_r+0x50>
 80014b8:	2309      	movs	r3, #9
 80014ba:	6033      	str	r3, [r6, #0]
 80014bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80014c0:	81a3      	strh	r3, [r4, #12]
 80014c2:	f04f 30ff 	mov.w	r0, #4294967295
 80014c6:	e03e      	b.n	8001546 <__swsetup_r+0xba>
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <__swsetup_r+0xd4>)
 80014ca:	429c      	cmp	r4, r3
 80014cc:	d101      	bne.n	80014d2 <__swsetup_r+0x46>
 80014ce:	68ac      	ldr	r4, [r5, #8]
 80014d0:	e7eb      	b.n	80014aa <__swsetup_r+0x1e>
 80014d2:	4b24      	ldr	r3, [pc, #144]	; (8001564 <__swsetup_r+0xd8>)
 80014d4:	429c      	cmp	r4, r3
 80014d6:	bf08      	it	eq
 80014d8:	68ec      	ldreq	r4, [r5, #12]
 80014da:	e7e6      	b.n	80014aa <__swsetup_r+0x1e>
 80014dc:	0758      	lsls	r0, r3, #29
 80014de:	d512      	bpl.n	8001506 <__swsetup_r+0x7a>
 80014e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80014e2:	b141      	cbz	r1, 80014f6 <__swsetup_r+0x6a>
 80014e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014e8:	4299      	cmp	r1, r3
 80014ea:	d002      	beq.n	80014f2 <__swsetup_r+0x66>
 80014ec:	4630      	mov	r0, r6
 80014ee:	f000 fa5b 	bl	80019a8 <_free_r>
 80014f2:	2300      	movs	r3, #0
 80014f4:	6363      	str	r3, [r4, #52]	; 0x34
 80014f6:	89a3      	ldrh	r3, [r4, #12]
 80014f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80014fc:	81a3      	strh	r3, [r4, #12]
 80014fe:	2300      	movs	r3, #0
 8001500:	6063      	str	r3, [r4, #4]
 8001502:	6923      	ldr	r3, [r4, #16]
 8001504:	6023      	str	r3, [r4, #0]
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	f043 0308 	orr.w	r3, r3, #8
 800150c:	81a3      	strh	r3, [r4, #12]
 800150e:	6923      	ldr	r3, [r4, #16]
 8001510:	b94b      	cbnz	r3, 8001526 <__swsetup_r+0x9a>
 8001512:	89a3      	ldrh	r3, [r4, #12]
 8001514:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151c:	d003      	beq.n	8001526 <__swsetup_r+0x9a>
 800151e:	4621      	mov	r1, r4
 8001520:	4630      	mov	r0, r6
 8001522:	f000 fa01 	bl	8001928 <__smakebuf_r>
 8001526:	89a0      	ldrh	r0, [r4, #12]
 8001528:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800152c:	f010 0301 	ands.w	r3, r0, #1
 8001530:	d00a      	beq.n	8001548 <__swsetup_r+0xbc>
 8001532:	2300      	movs	r3, #0
 8001534:	60a3      	str	r3, [r4, #8]
 8001536:	6963      	ldr	r3, [r4, #20]
 8001538:	425b      	negs	r3, r3
 800153a:	61a3      	str	r3, [r4, #24]
 800153c:	6923      	ldr	r3, [r4, #16]
 800153e:	b943      	cbnz	r3, 8001552 <__swsetup_r+0xc6>
 8001540:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001544:	d1ba      	bne.n	80014bc <__swsetup_r+0x30>
 8001546:	bd70      	pop	{r4, r5, r6, pc}
 8001548:	0781      	lsls	r1, r0, #30
 800154a:	bf58      	it	pl
 800154c:	6963      	ldrpl	r3, [r4, #20]
 800154e:	60a3      	str	r3, [r4, #8]
 8001550:	e7f4      	b.n	800153c <__swsetup_r+0xb0>
 8001552:	2000      	movs	r0, #0
 8001554:	e7f7      	b.n	8001546 <__swsetup_r+0xba>
 8001556:	bf00      	nop
 8001558:	2000001c 	.word	0x2000001c
 800155c:	08001f34 	.word	0x08001f34
 8001560:	08001f54 	.word	0x08001f54
 8001564:	08001f14 	.word	0x08001f14

08001568 <__sflush_r>:
 8001568:	898a      	ldrh	r2, [r1, #12]
 800156a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800156e:	4605      	mov	r5, r0
 8001570:	0710      	lsls	r0, r2, #28
 8001572:	460c      	mov	r4, r1
 8001574:	d458      	bmi.n	8001628 <__sflush_r+0xc0>
 8001576:	684b      	ldr	r3, [r1, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	dc05      	bgt.n	8001588 <__sflush_r+0x20>
 800157c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800157e:	2b00      	cmp	r3, #0
 8001580:	dc02      	bgt.n	8001588 <__sflush_r+0x20>
 8001582:	2000      	movs	r0, #0
 8001584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001588:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800158a:	2e00      	cmp	r6, #0
 800158c:	d0f9      	beq.n	8001582 <__sflush_r+0x1a>
 800158e:	2300      	movs	r3, #0
 8001590:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001594:	682f      	ldr	r7, [r5, #0]
 8001596:	602b      	str	r3, [r5, #0]
 8001598:	d032      	beq.n	8001600 <__sflush_r+0x98>
 800159a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800159c:	89a3      	ldrh	r3, [r4, #12]
 800159e:	075a      	lsls	r2, r3, #29
 80015a0:	d505      	bpl.n	80015ae <__sflush_r+0x46>
 80015a2:	6863      	ldr	r3, [r4, #4]
 80015a4:	1ac0      	subs	r0, r0, r3
 80015a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80015a8:	b10b      	cbz	r3, 80015ae <__sflush_r+0x46>
 80015aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ac:	1ac0      	subs	r0, r0, r3
 80015ae:	2300      	movs	r3, #0
 80015b0:	4602      	mov	r2, r0
 80015b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80015b4:	6a21      	ldr	r1, [r4, #32]
 80015b6:	4628      	mov	r0, r5
 80015b8:	47b0      	blx	r6
 80015ba:	1c43      	adds	r3, r0, #1
 80015bc:	89a3      	ldrh	r3, [r4, #12]
 80015be:	d106      	bne.n	80015ce <__sflush_r+0x66>
 80015c0:	6829      	ldr	r1, [r5, #0]
 80015c2:	291d      	cmp	r1, #29
 80015c4:	d82c      	bhi.n	8001620 <__sflush_r+0xb8>
 80015c6:	4a2a      	ldr	r2, [pc, #168]	; (8001670 <__sflush_r+0x108>)
 80015c8:	40ca      	lsrs	r2, r1
 80015ca:	07d6      	lsls	r6, r2, #31
 80015cc:	d528      	bpl.n	8001620 <__sflush_r+0xb8>
 80015ce:	2200      	movs	r2, #0
 80015d0:	6062      	str	r2, [r4, #4]
 80015d2:	04d9      	lsls	r1, r3, #19
 80015d4:	6922      	ldr	r2, [r4, #16]
 80015d6:	6022      	str	r2, [r4, #0]
 80015d8:	d504      	bpl.n	80015e4 <__sflush_r+0x7c>
 80015da:	1c42      	adds	r2, r0, #1
 80015dc:	d101      	bne.n	80015e2 <__sflush_r+0x7a>
 80015de:	682b      	ldr	r3, [r5, #0]
 80015e0:	b903      	cbnz	r3, 80015e4 <__sflush_r+0x7c>
 80015e2:	6560      	str	r0, [r4, #84]	; 0x54
 80015e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015e6:	602f      	str	r7, [r5, #0]
 80015e8:	2900      	cmp	r1, #0
 80015ea:	d0ca      	beq.n	8001582 <__sflush_r+0x1a>
 80015ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015f0:	4299      	cmp	r1, r3
 80015f2:	d002      	beq.n	80015fa <__sflush_r+0x92>
 80015f4:	4628      	mov	r0, r5
 80015f6:	f000 f9d7 	bl	80019a8 <_free_r>
 80015fa:	2000      	movs	r0, #0
 80015fc:	6360      	str	r0, [r4, #52]	; 0x34
 80015fe:	e7c1      	b.n	8001584 <__sflush_r+0x1c>
 8001600:	6a21      	ldr	r1, [r4, #32]
 8001602:	2301      	movs	r3, #1
 8001604:	4628      	mov	r0, r5
 8001606:	47b0      	blx	r6
 8001608:	1c41      	adds	r1, r0, #1
 800160a:	d1c7      	bne.n	800159c <__sflush_r+0x34>
 800160c:	682b      	ldr	r3, [r5, #0]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0c4      	beq.n	800159c <__sflush_r+0x34>
 8001612:	2b1d      	cmp	r3, #29
 8001614:	d001      	beq.n	800161a <__sflush_r+0xb2>
 8001616:	2b16      	cmp	r3, #22
 8001618:	d101      	bne.n	800161e <__sflush_r+0xb6>
 800161a:	602f      	str	r7, [r5, #0]
 800161c:	e7b1      	b.n	8001582 <__sflush_r+0x1a>
 800161e:	89a3      	ldrh	r3, [r4, #12]
 8001620:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001624:	81a3      	strh	r3, [r4, #12]
 8001626:	e7ad      	b.n	8001584 <__sflush_r+0x1c>
 8001628:	690f      	ldr	r7, [r1, #16]
 800162a:	2f00      	cmp	r7, #0
 800162c:	d0a9      	beq.n	8001582 <__sflush_r+0x1a>
 800162e:	0793      	lsls	r3, r2, #30
 8001630:	680e      	ldr	r6, [r1, #0]
 8001632:	bf08      	it	eq
 8001634:	694b      	ldreq	r3, [r1, #20]
 8001636:	600f      	str	r7, [r1, #0]
 8001638:	bf18      	it	ne
 800163a:	2300      	movne	r3, #0
 800163c:	eba6 0807 	sub.w	r8, r6, r7
 8001640:	608b      	str	r3, [r1, #8]
 8001642:	f1b8 0f00 	cmp.w	r8, #0
 8001646:	dd9c      	ble.n	8001582 <__sflush_r+0x1a>
 8001648:	6a21      	ldr	r1, [r4, #32]
 800164a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800164c:	4643      	mov	r3, r8
 800164e:	463a      	mov	r2, r7
 8001650:	4628      	mov	r0, r5
 8001652:	47b0      	blx	r6
 8001654:	2800      	cmp	r0, #0
 8001656:	dc06      	bgt.n	8001666 <__sflush_r+0xfe>
 8001658:	89a3      	ldrh	r3, [r4, #12]
 800165a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800165e:	81a3      	strh	r3, [r4, #12]
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	e78e      	b.n	8001584 <__sflush_r+0x1c>
 8001666:	4407      	add	r7, r0
 8001668:	eba8 0800 	sub.w	r8, r8, r0
 800166c:	e7e9      	b.n	8001642 <__sflush_r+0xda>
 800166e:	bf00      	nop
 8001670:	20400001 	.word	0x20400001

08001674 <_fflush_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	690b      	ldr	r3, [r1, #16]
 8001678:	4605      	mov	r5, r0
 800167a:	460c      	mov	r4, r1
 800167c:	b913      	cbnz	r3, 8001684 <_fflush_r+0x10>
 800167e:	2500      	movs	r5, #0
 8001680:	4628      	mov	r0, r5
 8001682:	bd38      	pop	{r3, r4, r5, pc}
 8001684:	b118      	cbz	r0, 800168e <_fflush_r+0x1a>
 8001686:	6983      	ldr	r3, [r0, #24]
 8001688:	b90b      	cbnz	r3, 800168e <_fflush_r+0x1a>
 800168a:	f000 f887 	bl	800179c <__sinit>
 800168e:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <_fflush_r+0x6c>)
 8001690:	429c      	cmp	r4, r3
 8001692:	d11b      	bne.n	80016cc <_fflush_r+0x58>
 8001694:	686c      	ldr	r4, [r5, #4]
 8001696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0ef      	beq.n	800167e <_fflush_r+0xa>
 800169e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80016a0:	07d0      	lsls	r0, r2, #31
 80016a2:	d404      	bmi.n	80016ae <_fflush_r+0x3a>
 80016a4:	0599      	lsls	r1, r3, #22
 80016a6:	d402      	bmi.n	80016ae <_fflush_r+0x3a>
 80016a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016aa:	f000 f915 	bl	80018d8 <__retarget_lock_acquire_recursive>
 80016ae:	4628      	mov	r0, r5
 80016b0:	4621      	mov	r1, r4
 80016b2:	f7ff ff59 	bl	8001568 <__sflush_r>
 80016b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80016b8:	07da      	lsls	r2, r3, #31
 80016ba:	4605      	mov	r5, r0
 80016bc:	d4e0      	bmi.n	8001680 <_fflush_r+0xc>
 80016be:	89a3      	ldrh	r3, [r4, #12]
 80016c0:	059b      	lsls	r3, r3, #22
 80016c2:	d4dd      	bmi.n	8001680 <_fflush_r+0xc>
 80016c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80016c6:	f000 f908 	bl	80018da <__retarget_lock_release_recursive>
 80016ca:	e7d9      	b.n	8001680 <_fflush_r+0xc>
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <_fflush_r+0x70>)
 80016ce:	429c      	cmp	r4, r3
 80016d0:	d101      	bne.n	80016d6 <_fflush_r+0x62>
 80016d2:	68ac      	ldr	r4, [r5, #8]
 80016d4:	e7df      	b.n	8001696 <_fflush_r+0x22>
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <_fflush_r+0x74>)
 80016d8:	429c      	cmp	r4, r3
 80016da:	bf08      	it	eq
 80016dc:	68ec      	ldreq	r4, [r5, #12]
 80016de:	e7da      	b.n	8001696 <_fflush_r+0x22>
 80016e0:	08001f34 	.word	0x08001f34
 80016e4:	08001f54 	.word	0x08001f54
 80016e8:	08001f14 	.word	0x08001f14

080016ec <std>:
 80016ec:	2300      	movs	r3, #0
 80016ee:	b510      	push	{r4, lr}
 80016f0:	4604      	mov	r4, r0
 80016f2:	e9c0 3300 	strd	r3, r3, [r0]
 80016f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80016fa:	6083      	str	r3, [r0, #8]
 80016fc:	8181      	strh	r1, [r0, #12]
 80016fe:	6643      	str	r3, [r0, #100]	; 0x64
 8001700:	81c2      	strh	r2, [r0, #14]
 8001702:	6183      	str	r3, [r0, #24]
 8001704:	4619      	mov	r1, r3
 8001706:	2208      	movs	r2, #8
 8001708:	305c      	adds	r0, #92	; 0x5c
 800170a:	f7ff fb3f 	bl	8000d8c <memset>
 800170e:	4b05      	ldr	r3, [pc, #20]	; (8001724 <std+0x38>)
 8001710:	6263      	str	r3, [r4, #36]	; 0x24
 8001712:	4b05      	ldr	r3, [pc, #20]	; (8001728 <std+0x3c>)
 8001714:	62a3      	str	r3, [r4, #40]	; 0x28
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <std+0x40>)
 8001718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800171a:	4b05      	ldr	r3, [pc, #20]	; (8001730 <std+0x44>)
 800171c:	6224      	str	r4, [r4, #32]
 800171e:	6323      	str	r3, [r4, #48]	; 0x30
 8001720:	bd10      	pop	{r4, pc}
 8001722:	bf00      	nop
 8001724:	08001c19 	.word	0x08001c19
 8001728:	08001c3b 	.word	0x08001c3b
 800172c:	08001c73 	.word	0x08001c73
 8001730:	08001c97 	.word	0x08001c97

08001734 <_cleanup_r>:
 8001734:	4901      	ldr	r1, [pc, #4]	; (800173c <_cleanup_r+0x8>)
 8001736:	f000 b8af 	b.w	8001898 <_fwalk_reent>
 800173a:	bf00      	nop
 800173c:	08001675 	.word	0x08001675

08001740 <__sfmoreglue>:
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	2268      	movs	r2, #104	; 0x68
 8001744:	1e4d      	subs	r5, r1, #1
 8001746:	4355      	muls	r5, r2
 8001748:	460e      	mov	r6, r1
 800174a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800174e:	f000 f997 	bl	8001a80 <_malloc_r>
 8001752:	4604      	mov	r4, r0
 8001754:	b140      	cbz	r0, 8001768 <__sfmoreglue+0x28>
 8001756:	2100      	movs	r1, #0
 8001758:	e9c0 1600 	strd	r1, r6, [r0]
 800175c:	300c      	adds	r0, #12
 800175e:	60a0      	str	r0, [r4, #8]
 8001760:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001764:	f7ff fb12 	bl	8000d8c <memset>
 8001768:	4620      	mov	r0, r4
 800176a:	bd70      	pop	{r4, r5, r6, pc}

0800176c <__sfp_lock_acquire>:
 800176c:	4801      	ldr	r0, [pc, #4]	; (8001774 <__sfp_lock_acquire+0x8>)
 800176e:	f000 b8b3 	b.w	80018d8 <__retarget_lock_acquire_recursive>
 8001772:	bf00      	nop
 8001774:	200000d5 	.word	0x200000d5

08001778 <__sfp_lock_release>:
 8001778:	4801      	ldr	r0, [pc, #4]	; (8001780 <__sfp_lock_release+0x8>)
 800177a:	f000 b8ae 	b.w	80018da <__retarget_lock_release_recursive>
 800177e:	bf00      	nop
 8001780:	200000d5 	.word	0x200000d5

08001784 <__sinit_lock_acquire>:
 8001784:	4801      	ldr	r0, [pc, #4]	; (800178c <__sinit_lock_acquire+0x8>)
 8001786:	f000 b8a7 	b.w	80018d8 <__retarget_lock_acquire_recursive>
 800178a:	bf00      	nop
 800178c:	200000d6 	.word	0x200000d6

08001790 <__sinit_lock_release>:
 8001790:	4801      	ldr	r0, [pc, #4]	; (8001798 <__sinit_lock_release+0x8>)
 8001792:	f000 b8a2 	b.w	80018da <__retarget_lock_release_recursive>
 8001796:	bf00      	nop
 8001798:	200000d6 	.word	0x200000d6

0800179c <__sinit>:
 800179c:	b510      	push	{r4, lr}
 800179e:	4604      	mov	r4, r0
 80017a0:	f7ff fff0 	bl	8001784 <__sinit_lock_acquire>
 80017a4:	69a3      	ldr	r3, [r4, #24]
 80017a6:	b11b      	cbz	r3, 80017b0 <__sinit+0x14>
 80017a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ac:	f7ff bff0 	b.w	8001790 <__sinit_lock_release>
 80017b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80017b4:	6523      	str	r3, [r4, #80]	; 0x50
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <__sinit+0x68>)
 80017b8:	4a13      	ldr	r2, [pc, #76]	; (8001808 <__sinit+0x6c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80017be:	42a3      	cmp	r3, r4
 80017c0:	bf04      	itt	eq
 80017c2:	2301      	moveq	r3, #1
 80017c4:	61a3      	streq	r3, [r4, #24]
 80017c6:	4620      	mov	r0, r4
 80017c8:	f000 f820 	bl	800180c <__sfp>
 80017cc:	6060      	str	r0, [r4, #4]
 80017ce:	4620      	mov	r0, r4
 80017d0:	f000 f81c 	bl	800180c <__sfp>
 80017d4:	60a0      	str	r0, [r4, #8]
 80017d6:	4620      	mov	r0, r4
 80017d8:	f000 f818 	bl	800180c <__sfp>
 80017dc:	2200      	movs	r2, #0
 80017de:	60e0      	str	r0, [r4, #12]
 80017e0:	2104      	movs	r1, #4
 80017e2:	6860      	ldr	r0, [r4, #4]
 80017e4:	f7ff ff82 	bl	80016ec <std>
 80017e8:	68a0      	ldr	r0, [r4, #8]
 80017ea:	2201      	movs	r2, #1
 80017ec:	2109      	movs	r1, #9
 80017ee:	f7ff ff7d 	bl	80016ec <std>
 80017f2:	68e0      	ldr	r0, [r4, #12]
 80017f4:	2202      	movs	r2, #2
 80017f6:	2112      	movs	r1, #18
 80017f8:	f7ff ff78 	bl	80016ec <std>
 80017fc:	2301      	movs	r3, #1
 80017fe:	61a3      	str	r3, [r4, #24]
 8001800:	e7d2      	b.n	80017a8 <__sinit+0xc>
 8001802:	bf00      	nop
 8001804:	08001edc 	.word	0x08001edc
 8001808:	08001735 	.word	0x08001735

0800180c <__sfp>:
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800180e:	4607      	mov	r7, r0
 8001810:	f7ff ffac 	bl	800176c <__sfp_lock_acquire>
 8001814:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <__sfp+0x84>)
 8001816:	681e      	ldr	r6, [r3, #0]
 8001818:	69b3      	ldr	r3, [r6, #24]
 800181a:	b913      	cbnz	r3, 8001822 <__sfp+0x16>
 800181c:	4630      	mov	r0, r6
 800181e:	f7ff ffbd 	bl	800179c <__sinit>
 8001822:	3648      	adds	r6, #72	; 0x48
 8001824:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001828:	3b01      	subs	r3, #1
 800182a:	d503      	bpl.n	8001834 <__sfp+0x28>
 800182c:	6833      	ldr	r3, [r6, #0]
 800182e:	b30b      	cbz	r3, 8001874 <__sfp+0x68>
 8001830:	6836      	ldr	r6, [r6, #0]
 8001832:	e7f7      	b.n	8001824 <__sfp+0x18>
 8001834:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001838:	b9d5      	cbnz	r5, 8001870 <__sfp+0x64>
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <__sfp+0x88>)
 800183c:	60e3      	str	r3, [r4, #12]
 800183e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001842:	6665      	str	r5, [r4, #100]	; 0x64
 8001844:	f000 f847 	bl	80018d6 <__retarget_lock_init_recursive>
 8001848:	f7ff ff96 	bl	8001778 <__sfp_lock_release>
 800184c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001850:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001854:	6025      	str	r5, [r4, #0]
 8001856:	61a5      	str	r5, [r4, #24]
 8001858:	2208      	movs	r2, #8
 800185a:	4629      	mov	r1, r5
 800185c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001860:	f7ff fa94 	bl	8000d8c <memset>
 8001864:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001868:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800186c:	4620      	mov	r0, r4
 800186e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001870:	3468      	adds	r4, #104	; 0x68
 8001872:	e7d9      	b.n	8001828 <__sfp+0x1c>
 8001874:	2104      	movs	r1, #4
 8001876:	4638      	mov	r0, r7
 8001878:	f7ff ff62 	bl	8001740 <__sfmoreglue>
 800187c:	4604      	mov	r4, r0
 800187e:	6030      	str	r0, [r6, #0]
 8001880:	2800      	cmp	r0, #0
 8001882:	d1d5      	bne.n	8001830 <__sfp+0x24>
 8001884:	f7ff ff78 	bl	8001778 <__sfp_lock_release>
 8001888:	230c      	movs	r3, #12
 800188a:	603b      	str	r3, [r7, #0]
 800188c:	e7ee      	b.n	800186c <__sfp+0x60>
 800188e:	bf00      	nop
 8001890:	08001edc 	.word	0x08001edc
 8001894:	ffff0001 	.word	0xffff0001

08001898 <_fwalk_reent>:
 8001898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800189c:	4606      	mov	r6, r0
 800189e:	4688      	mov	r8, r1
 80018a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80018a4:	2700      	movs	r7, #0
 80018a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018aa:	f1b9 0901 	subs.w	r9, r9, #1
 80018ae:	d505      	bpl.n	80018bc <_fwalk_reent+0x24>
 80018b0:	6824      	ldr	r4, [r4, #0]
 80018b2:	2c00      	cmp	r4, #0
 80018b4:	d1f7      	bne.n	80018a6 <_fwalk_reent+0xe>
 80018b6:	4638      	mov	r0, r7
 80018b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018bc:	89ab      	ldrh	r3, [r5, #12]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d907      	bls.n	80018d2 <_fwalk_reent+0x3a>
 80018c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018c6:	3301      	adds	r3, #1
 80018c8:	d003      	beq.n	80018d2 <_fwalk_reent+0x3a>
 80018ca:	4629      	mov	r1, r5
 80018cc:	4630      	mov	r0, r6
 80018ce:	47c0      	blx	r8
 80018d0:	4307      	orrs	r7, r0
 80018d2:	3568      	adds	r5, #104	; 0x68
 80018d4:	e7e9      	b.n	80018aa <_fwalk_reent+0x12>

080018d6 <__retarget_lock_init_recursive>:
 80018d6:	4770      	bx	lr

080018d8 <__retarget_lock_acquire_recursive>:
 80018d8:	4770      	bx	lr

080018da <__retarget_lock_release_recursive>:
 80018da:	4770      	bx	lr

080018dc <__swhatbuf_r>:
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	460e      	mov	r6, r1
 80018e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018e4:	2900      	cmp	r1, #0
 80018e6:	b096      	sub	sp, #88	; 0x58
 80018e8:	4614      	mov	r4, r2
 80018ea:	461d      	mov	r5, r3
 80018ec:	da08      	bge.n	8001900 <__swhatbuf_r+0x24>
 80018ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	602a      	str	r2, [r5, #0]
 80018f6:	061a      	lsls	r2, r3, #24
 80018f8:	d410      	bmi.n	800191c <__swhatbuf_r+0x40>
 80018fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018fe:	e00e      	b.n	800191e <__swhatbuf_r+0x42>
 8001900:	466a      	mov	r2, sp
 8001902:	f000 f9ef 	bl	8001ce4 <_fstat_r>
 8001906:	2800      	cmp	r0, #0
 8001908:	dbf1      	blt.n	80018ee <__swhatbuf_r+0x12>
 800190a:	9a01      	ldr	r2, [sp, #4]
 800190c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001910:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001914:	425a      	negs	r2, r3
 8001916:	415a      	adcs	r2, r3
 8001918:	602a      	str	r2, [r5, #0]
 800191a:	e7ee      	b.n	80018fa <__swhatbuf_r+0x1e>
 800191c:	2340      	movs	r3, #64	; 0x40
 800191e:	2000      	movs	r0, #0
 8001920:	6023      	str	r3, [r4, #0]
 8001922:	b016      	add	sp, #88	; 0x58
 8001924:	bd70      	pop	{r4, r5, r6, pc}
	...

08001928 <__smakebuf_r>:
 8001928:	898b      	ldrh	r3, [r1, #12]
 800192a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800192c:	079d      	lsls	r5, r3, #30
 800192e:	4606      	mov	r6, r0
 8001930:	460c      	mov	r4, r1
 8001932:	d507      	bpl.n	8001944 <__smakebuf_r+0x1c>
 8001934:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001938:	6023      	str	r3, [r4, #0]
 800193a:	6123      	str	r3, [r4, #16]
 800193c:	2301      	movs	r3, #1
 800193e:	6163      	str	r3, [r4, #20]
 8001940:	b002      	add	sp, #8
 8001942:	bd70      	pop	{r4, r5, r6, pc}
 8001944:	ab01      	add	r3, sp, #4
 8001946:	466a      	mov	r2, sp
 8001948:	f7ff ffc8 	bl	80018dc <__swhatbuf_r>
 800194c:	9900      	ldr	r1, [sp, #0]
 800194e:	4605      	mov	r5, r0
 8001950:	4630      	mov	r0, r6
 8001952:	f000 f895 	bl	8001a80 <_malloc_r>
 8001956:	b948      	cbnz	r0, 800196c <__smakebuf_r+0x44>
 8001958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800195c:	059a      	lsls	r2, r3, #22
 800195e:	d4ef      	bmi.n	8001940 <__smakebuf_r+0x18>
 8001960:	f023 0303 	bic.w	r3, r3, #3
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	81a3      	strh	r3, [r4, #12]
 800196a:	e7e3      	b.n	8001934 <__smakebuf_r+0xc>
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <__smakebuf_r+0x7c>)
 800196e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001970:	89a3      	ldrh	r3, [r4, #12]
 8001972:	6020      	str	r0, [r4, #0]
 8001974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001978:	81a3      	strh	r3, [r4, #12]
 800197a:	9b00      	ldr	r3, [sp, #0]
 800197c:	6163      	str	r3, [r4, #20]
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	6120      	str	r0, [r4, #16]
 8001982:	b15b      	cbz	r3, 800199c <__smakebuf_r+0x74>
 8001984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001988:	4630      	mov	r0, r6
 800198a:	f000 f9bd 	bl	8001d08 <_isatty_r>
 800198e:	b128      	cbz	r0, 800199c <__smakebuf_r+0x74>
 8001990:	89a3      	ldrh	r3, [r4, #12]
 8001992:	f023 0303 	bic.w	r3, r3, #3
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	81a3      	strh	r3, [r4, #12]
 800199c:	89a0      	ldrh	r0, [r4, #12]
 800199e:	4305      	orrs	r5, r0
 80019a0:	81a5      	strh	r5, [r4, #12]
 80019a2:	e7cd      	b.n	8001940 <__smakebuf_r+0x18>
 80019a4:	08001735 	.word	0x08001735

080019a8 <_free_r>:
 80019a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80019aa:	2900      	cmp	r1, #0
 80019ac:	d044      	beq.n	8001a38 <_free_r+0x90>
 80019ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019b2:	9001      	str	r0, [sp, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f1a1 0404 	sub.w	r4, r1, #4
 80019ba:	bfb8      	it	lt
 80019bc:	18e4      	addlt	r4, r4, r3
 80019be:	f000 f9c5 	bl	8001d4c <__malloc_lock>
 80019c2:	4a1e      	ldr	r2, [pc, #120]	; (8001a3c <_free_r+0x94>)
 80019c4:	9801      	ldr	r0, [sp, #4]
 80019c6:	6813      	ldr	r3, [r2, #0]
 80019c8:	b933      	cbnz	r3, 80019d8 <_free_r+0x30>
 80019ca:	6063      	str	r3, [r4, #4]
 80019cc:	6014      	str	r4, [r2, #0]
 80019ce:	b003      	add	sp, #12
 80019d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80019d4:	f000 b9c0 	b.w	8001d58 <__malloc_unlock>
 80019d8:	42a3      	cmp	r3, r4
 80019da:	d908      	bls.n	80019ee <_free_r+0x46>
 80019dc:	6825      	ldr	r5, [r4, #0]
 80019de:	1961      	adds	r1, r4, r5
 80019e0:	428b      	cmp	r3, r1
 80019e2:	bf01      	itttt	eq
 80019e4:	6819      	ldreq	r1, [r3, #0]
 80019e6:	685b      	ldreq	r3, [r3, #4]
 80019e8:	1949      	addeq	r1, r1, r5
 80019ea:	6021      	streq	r1, [r4, #0]
 80019ec:	e7ed      	b.n	80019ca <_free_r+0x22>
 80019ee:	461a      	mov	r2, r3
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	b10b      	cbz	r3, 80019f8 <_free_r+0x50>
 80019f4:	42a3      	cmp	r3, r4
 80019f6:	d9fa      	bls.n	80019ee <_free_r+0x46>
 80019f8:	6811      	ldr	r1, [r2, #0]
 80019fa:	1855      	adds	r5, r2, r1
 80019fc:	42a5      	cmp	r5, r4
 80019fe:	d10b      	bne.n	8001a18 <_free_r+0x70>
 8001a00:	6824      	ldr	r4, [r4, #0]
 8001a02:	4421      	add	r1, r4
 8001a04:	1854      	adds	r4, r2, r1
 8001a06:	42a3      	cmp	r3, r4
 8001a08:	6011      	str	r1, [r2, #0]
 8001a0a:	d1e0      	bne.n	80019ce <_free_r+0x26>
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	6053      	str	r3, [r2, #4]
 8001a12:	4421      	add	r1, r4
 8001a14:	6011      	str	r1, [r2, #0]
 8001a16:	e7da      	b.n	80019ce <_free_r+0x26>
 8001a18:	d902      	bls.n	8001a20 <_free_r+0x78>
 8001a1a:	230c      	movs	r3, #12
 8001a1c:	6003      	str	r3, [r0, #0]
 8001a1e:	e7d6      	b.n	80019ce <_free_r+0x26>
 8001a20:	6825      	ldr	r5, [r4, #0]
 8001a22:	1961      	adds	r1, r4, r5
 8001a24:	428b      	cmp	r3, r1
 8001a26:	bf04      	itt	eq
 8001a28:	6819      	ldreq	r1, [r3, #0]
 8001a2a:	685b      	ldreq	r3, [r3, #4]
 8001a2c:	6063      	str	r3, [r4, #4]
 8001a2e:	bf04      	itt	eq
 8001a30:	1949      	addeq	r1, r1, r5
 8001a32:	6021      	streq	r1, [r4, #0]
 8001a34:	6054      	str	r4, [r2, #4]
 8001a36:	e7ca      	b.n	80019ce <_free_r+0x26>
 8001a38:	b003      	add	sp, #12
 8001a3a:	bd30      	pop	{r4, r5, pc}
 8001a3c:	200000d8 	.word	0x200000d8

08001a40 <sbrk_aligned>:
 8001a40:	b570      	push	{r4, r5, r6, lr}
 8001a42:	4e0e      	ldr	r6, [pc, #56]	; (8001a7c <sbrk_aligned+0x3c>)
 8001a44:	460c      	mov	r4, r1
 8001a46:	6831      	ldr	r1, [r6, #0]
 8001a48:	4605      	mov	r5, r0
 8001a4a:	b911      	cbnz	r1, 8001a52 <sbrk_aligned+0x12>
 8001a4c:	f000 f8d4 	bl	8001bf8 <_sbrk_r>
 8001a50:	6030      	str	r0, [r6, #0]
 8001a52:	4621      	mov	r1, r4
 8001a54:	4628      	mov	r0, r5
 8001a56:	f000 f8cf 	bl	8001bf8 <_sbrk_r>
 8001a5a:	1c43      	adds	r3, r0, #1
 8001a5c:	d00a      	beq.n	8001a74 <sbrk_aligned+0x34>
 8001a5e:	1cc4      	adds	r4, r0, #3
 8001a60:	f024 0403 	bic.w	r4, r4, #3
 8001a64:	42a0      	cmp	r0, r4
 8001a66:	d007      	beq.n	8001a78 <sbrk_aligned+0x38>
 8001a68:	1a21      	subs	r1, r4, r0
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f000 f8c4 	bl	8001bf8 <_sbrk_r>
 8001a70:	3001      	adds	r0, #1
 8001a72:	d101      	bne.n	8001a78 <sbrk_aligned+0x38>
 8001a74:	f04f 34ff 	mov.w	r4, #4294967295
 8001a78:	4620      	mov	r0, r4
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	200000dc 	.word	0x200000dc

08001a80 <_malloc_r>:
 8001a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a84:	1ccd      	adds	r5, r1, #3
 8001a86:	f025 0503 	bic.w	r5, r5, #3
 8001a8a:	3508      	adds	r5, #8
 8001a8c:	2d0c      	cmp	r5, #12
 8001a8e:	bf38      	it	cc
 8001a90:	250c      	movcc	r5, #12
 8001a92:	2d00      	cmp	r5, #0
 8001a94:	4607      	mov	r7, r0
 8001a96:	db01      	blt.n	8001a9c <_malloc_r+0x1c>
 8001a98:	42a9      	cmp	r1, r5
 8001a9a:	d905      	bls.n	8001aa8 <_malloc_r+0x28>
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	2600      	movs	r6, #0
 8001aa2:	4630      	mov	r0, r6
 8001aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001aa8:	4e2e      	ldr	r6, [pc, #184]	; (8001b64 <_malloc_r+0xe4>)
 8001aaa:	f000 f94f 	bl	8001d4c <__malloc_lock>
 8001aae:	6833      	ldr	r3, [r6, #0]
 8001ab0:	461c      	mov	r4, r3
 8001ab2:	bb34      	cbnz	r4, 8001b02 <_malloc_r+0x82>
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	4638      	mov	r0, r7
 8001ab8:	f7ff ffc2 	bl	8001a40 <sbrk_aligned>
 8001abc:	1c43      	adds	r3, r0, #1
 8001abe:	4604      	mov	r4, r0
 8001ac0:	d14d      	bne.n	8001b5e <_malloc_r+0xde>
 8001ac2:	6834      	ldr	r4, [r6, #0]
 8001ac4:	4626      	mov	r6, r4
 8001ac6:	2e00      	cmp	r6, #0
 8001ac8:	d140      	bne.n	8001b4c <_malloc_r+0xcc>
 8001aca:	6823      	ldr	r3, [r4, #0]
 8001acc:	4631      	mov	r1, r6
 8001ace:	4638      	mov	r0, r7
 8001ad0:	eb04 0803 	add.w	r8, r4, r3
 8001ad4:	f000 f890 	bl	8001bf8 <_sbrk_r>
 8001ad8:	4580      	cmp	r8, r0
 8001ada:	d13a      	bne.n	8001b52 <_malloc_r+0xd2>
 8001adc:	6821      	ldr	r1, [r4, #0]
 8001ade:	3503      	adds	r5, #3
 8001ae0:	1a6d      	subs	r5, r5, r1
 8001ae2:	f025 0503 	bic.w	r5, r5, #3
 8001ae6:	3508      	adds	r5, #8
 8001ae8:	2d0c      	cmp	r5, #12
 8001aea:	bf38      	it	cc
 8001aec:	250c      	movcc	r5, #12
 8001aee:	4629      	mov	r1, r5
 8001af0:	4638      	mov	r0, r7
 8001af2:	f7ff ffa5 	bl	8001a40 <sbrk_aligned>
 8001af6:	3001      	adds	r0, #1
 8001af8:	d02b      	beq.n	8001b52 <_malloc_r+0xd2>
 8001afa:	6823      	ldr	r3, [r4, #0]
 8001afc:	442b      	add	r3, r5
 8001afe:	6023      	str	r3, [r4, #0]
 8001b00:	e00e      	b.n	8001b20 <_malloc_r+0xa0>
 8001b02:	6822      	ldr	r2, [r4, #0]
 8001b04:	1b52      	subs	r2, r2, r5
 8001b06:	d41e      	bmi.n	8001b46 <_malloc_r+0xc6>
 8001b08:	2a0b      	cmp	r2, #11
 8001b0a:	d916      	bls.n	8001b3a <_malloc_r+0xba>
 8001b0c:	1961      	adds	r1, r4, r5
 8001b0e:	42a3      	cmp	r3, r4
 8001b10:	6025      	str	r5, [r4, #0]
 8001b12:	bf18      	it	ne
 8001b14:	6059      	strne	r1, [r3, #4]
 8001b16:	6863      	ldr	r3, [r4, #4]
 8001b18:	bf08      	it	eq
 8001b1a:	6031      	streq	r1, [r6, #0]
 8001b1c:	5162      	str	r2, [r4, r5]
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	4638      	mov	r0, r7
 8001b22:	f104 060b 	add.w	r6, r4, #11
 8001b26:	f000 f917 	bl	8001d58 <__malloc_unlock>
 8001b2a:	f026 0607 	bic.w	r6, r6, #7
 8001b2e:	1d23      	adds	r3, r4, #4
 8001b30:	1af2      	subs	r2, r6, r3
 8001b32:	d0b6      	beq.n	8001aa2 <_malloc_r+0x22>
 8001b34:	1b9b      	subs	r3, r3, r6
 8001b36:	50a3      	str	r3, [r4, r2]
 8001b38:	e7b3      	b.n	8001aa2 <_malloc_r+0x22>
 8001b3a:	6862      	ldr	r2, [r4, #4]
 8001b3c:	42a3      	cmp	r3, r4
 8001b3e:	bf0c      	ite	eq
 8001b40:	6032      	streq	r2, [r6, #0]
 8001b42:	605a      	strne	r2, [r3, #4]
 8001b44:	e7ec      	b.n	8001b20 <_malloc_r+0xa0>
 8001b46:	4623      	mov	r3, r4
 8001b48:	6864      	ldr	r4, [r4, #4]
 8001b4a:	e7b2      	b.n	8001ab2 <_malloc_r+0x32>
 8001b4c:	4634      	mov	r4, r6
 8001b4e:	6876      	ldr	r6, [r6, #4]
 8001b50:	e7b9      	b.n	8001ac6 <_malloc_r+0x46>
 8001b52:	230c      	movs	r3, #12
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4638      	mov	r0, r7
 8001b58:	f000 f8fe 	bl	8001d58 <__malloc_unlock>
 8001b5c:	e7a1      	b.n	8001aa2 <_malloc_r+0x22>
 8001b5e:	6025      	str	r5, [r4, #0]
 8001b60:	e7de      	b.n	8001b20 <_malloc_r+0xa0>
 8001b62:	bf00      	nop
 8001b64:	200000d8 	.word	0x200000d8

08001b68 <_putc_r>:
 8001b68:	b570      	push	{r4, r5, r6, lr}
 8001b6a:	460d      	mov	r5, r1
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	4606      	mov	r6, r0
 8001b70:	b118      	cbz	r0, 8001b7a <_putc_r+0x12>
 8001b72:	6983      	ldr	r3, [r0, #24]
 8001b74:	b90b      	cbnz	r3, 8001b7a <_putc_r+0x12>
 8001b76:	f7ff fe11 	bl	800179c <__sinit>
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <_putc_r+0x84>)
 8001b7c:	429c      	cmp	r4, r3
 8001b7e:	d124      	bne.n	8001bca <_putc_r+0x62>
 8001b80:	6874      	ldr	r4, [r6, #4]
 8001b82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001b84:	07d8      	lsls	r0, r3, #31
 8001b86:	d405      	bmi.n	8001b94 <_putc_r+0x2c>
 8001b88:	89a3      	ldrh	r3, [r4, #12]
 8001b8a:	0599      	lsls	r1, r3, #22
 8001b8c:	d402      	bmi.n	8001b94 <_putc_r+0x2c>
 8001b8e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001b90:	f7ff fea2 	bl	80018d8 <__retarget_lock_acquire_recursive>
 8001b94:	68a3      	ldr	r3, [r4, #8]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	60a3      	str	r3, [r4, #8]
 8001b9c:	da05      	bge.n	8001baa <_putc_r+0x42>
 8001b9e:	69a2      	ldr	r2, [r4, #24]
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	db1c      	blt.n	8001bde <_putc_r+0x76>
 8001ba4:	b2eb      	uxtb	r3, r5
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d019      	beq.n	8001bde <_putc_r+0x76>
 8001baa:	6823      	ldr	r3, [r4, #0]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	6022      	str	r2, [r4, #0]
 8001bb0:	701d      	strb	r5, [r3, #0]
 8001bb2:	b2ed      	uxtb	r5, r5
 8001bb4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001bb6:	07da      	lsls	r2, r3, #31
 8001bb8:	d405      	bmi.n	8001bc6 <_putc_r+0x5e>
 8001bba:	89a3      	ldrh	r3, [r4, #12]
 8001bbc:	059b      	lsls	r3, r3, #22
 8001bbe:	d402      	bmi.n	8001bc6 <_putc_r+0x5e>
 8001bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001bc2:	f7ff fe8a 	bl	80018da <__retarget_lock_release_recursive>
 8001bc6:	4628      	mov	r0, r5
 8001bc8:	bd70      	pop	{r4, r5, r6, pc}
 8001bca:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <_putc_r+0x88>)
 8001bcc:	429c      	cmp	r4, r3
 8001bce:	d101      	bne.n	8001bd4 <_putc_r+0x6c>
 8001bd0:	68b4      	ldr	r4, [r6, #8]
 8001bd2:	e7d6      	b.n	8001b82 <_putc_r+0x1a>
 8001bd4:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <_putc_r+0x8c>)
 8001bd6:	429c      	cmp	r4, r3
 8001bd8:	bf08      	it	eq
 8001bda:	68f4      	ldreq	r4, [r6, #12]
 8001bdc:	e7d1      	b.n	8001b82 <_putc_r+0x1a>
 8001bde:	4629      	mov	r1, r5
 8001be0:	4622      	mov	r2, r4
 8001be2:	4630      	mov	r0, r6
 8001be4:	f7ff fc00 	bl	80013e8 <__swbuf_r>
 8001be8:	4605      	mov	r5, r0
 8001bea:	e7e3      	b.n	8001bb4 <_putc_r+0x4c>
 8001bec:	08001f34 	.word	0x08001f34
 8001bf0:	08001f54 	.word	0x08001f54
 8001bf4:	08001f14 	.word	0x08001f14

08001bf8 <_sbrk_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4d06      	ldr	r5, [pc, #24]	; (8001c14 <_sbrk_r+0x1c>)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	4604      	mov	r4, r0
 8001c00:	4608      	mov	r0, r1
 8001c02:	602b      	str	r3, [r5, #0]
 8001c04:	f000 f8e8 	bl	8001dd8 <_sbrk>
 8001c08:	1c43      	adds	r3, r0, #1
 8001c0a:	d102      	bne.n	8001c12 <_sbrk_r+0x1a>
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	b103      	cbz	r3, 8001c12 <_sbrk_r+0x1a>
 8001c10:	6023      	str	r3, [r4, #0]
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
 8001c14:	200000e0 	.word	0x200000e0

08001c18 <__sread>:
 8001c18:	b510      	push	{r4, lr}
 8001c1a:	460c      	mov	r4, r1
 8001c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c20:	f000 f8a0 	bl	8001d64 <_read_r>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	bfab      	itete	ge
 8001c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8001c2c:	181b      	addge	r3, r3, r0
 8001c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001c32:	bfac      	ite	ge
 8001c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8001c36:	81a3      	strhlt	r3, [r4, #12]
 8001c38:	bd10      	pop	{r4, pc}

08001c3a <__swrite>:
 8001c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c3e:	461f      	mov	r7, r3
 8001c40:	898b      	ldrh	r3, [r1, #12]
 8001c42:	05db      	lsls	r3, r3, #23
 8001c44:	4605      	mov	r5, r0
 8001c46:	460c      	mov	r4, r1
 8001c48:	4616      	mov	r6, r2
 8001c4a:	d505      	bpl.n	8001c58 <__swrite+0x1e>
 8001c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c50:	2302      	movs	r3, #2
 8001c52:	2200      	movs	r2, #0
 8001c54:	f000 f868 	bl	8001d28 <_lseek_r>
 8001c58:	89a3      	ldrh	r3, [r4, #12]
 8001c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c62:	81a3      	strh	r3, [r4, #12]
 8001c64:	4632      	mov	r2, r6
 8001c66:	463b      	mov	r3, r7
 8001c68:	4628      	mov	r0, r5
 8001c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c6e:	f000 b817 	b.w	8001ca0 <_write_r>

08001c72 <__sseek>:
 8001c72:	b510      	push	{r4, lr}
 8001c74:	460c      	mov	r4, r1
 8001c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c7a:	f000 f855 	bl	8001d28 <_lseek_r>
 8001c7e:	1c43      	adds	r3, r0, #1
 8001c80:	89a3      	ldrh	r3, [r4, #12]
 8001c82:	bf15      	itete	ne
 8001c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c8e:	81a3      	strheq	r3, [r4, #12]
 8001c90:	bf18      	it	ne
 8001c92:	81a3      	strhne	r3, [r4, #12]
 8001c94:	bd10      	pop	{r4, pc}

08001c96 <__sclose>:
 8001c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c9a:	f000 b813 	b.w	8001cc4 <_close_r>
	...

08001ca0 <_write_r>:
 8001ca0:	b538      	push	{r3, r4, r5, lr}
 8001ca2:	4d07      	ldr	r5, [pc, #28]	; (8001cc0 <_write_r+0x20>)
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4608      	mov	r0, r1
 8001ca8:	4611      	mov	r1, r2
 8001caa:	2200      	movs	r2, #0
 8001cac:	602a      	str	r2, [r5, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f7fe fb15 	bl	80002de <_write>
 8001cb4:	1c43      	adds	r3, r0, #1
 8001cb6:	d102      	bne.n	8001cbe <_write_r+0x1e>
 8001cb8:	682b      	ldr	r3, [r5, #0]
 8001cba:	b103      	cbz	r3, 8001cbe <_write_r+0x1e>
 8001cbc:	6023      	str	r3, [r4, #0]
 8001cbe:	bd38      	pop	{r3, r4, r5, pc}
 8001cc0:	200000e0 	.word	0x200000e0

08001cc4 <_close_r>:
 8001cc4:	b538      	push	{r3, r4, r5, lr}
 8001cc6:	4d06      	ldr	r5, [pc, #24]	; (8001ce0 <_close_r+0x1c>)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	4604      	mov	r4, r0
 8001ccc:	4608      	mov	r0, r1
 8001cce:	602b      	str	r3, [r5, #0]
 8001cd0:	f000 f85a 	bl	8001d88 <_close>
 8001cd4:	1c43      	adds	r3, r0, #1
 8001cd6:	d102      	bne.n	8001cde <_close_r+0x1a>
 8001cd8:	682b      	ldr	r3, [r5, #0]
 8001cda:	b103      	cbz	r3, 8001cde <_close_r+0x1a>
 8001cdc:	6023      	str	r3, [r4, #0]
 8001cde:	bd38      	pop	{r3, r4, r5, pc}
 8001ce0:	200000e0 	.word	0x200000e0

08001ce4 <_fstat_r>:
 8001ce4:	b538      	push	{r3, r4, r5, lr}
 8001ce6:	4d07      	ldr	r5, [pc, #28]	; (8001d04 <_fstat_r+0x20>)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	4604      	mov	r4, r0
 8001cec:	4608      	mov	r0, r1
 8001cee:	4611      	mov	r1, r2
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	f000 f851 	bl	8001d98 <_fstat>
 8001cf6:	1c43      	adds	r3, r0, #1
 8001cf8:	d102      	bne.n	8001d00 <_fstat_r+0x1c>
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	b103      	cbz	r3, 8001d00 <_fstat_r+0x1c>
 8001cfe:	6023      	str	r3, [r4, #0]
 8001d00:	bd38      	pop	{r3, r4, r5, pc}
 8001d02:	bf00      	nop
 8001d04:	200000e0 	.word	0x200000e0

08001d08 <_isatty_r>:
 8001d08:	b538      	push	{r3, r4, r5, lr}
 8001d0a:	4d06      	ldr	r5, [pc, #24]	; (8001d24 <_isatty_r+0x1c>)
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	4604      	mov	r4, r0
 8001d10:	4608      	mov	r0, r1
 8001d12:	602b      	str	r3, [r5, #0]
 8001d14:	f000 f848 	bl	8001da8 <_isatty>
 8001d18:	1c43      	adds	r3, r0, #1
 8001d1a:	d102      	bne.n	8001d22 <_isatty_r+0x1a>
 8001d1c:	682b      	ldr	r3, [r5, #0]
 8001d1e:	b103      	cbz	r3, 8001d22 <_isatty_r+0x1a>
 8001d20:	6023      	str	r3, [r4, #0]
 8001d22:	bd38      	pop	{r3, r4, r5, pc}
 8001d24:	200000e0 	.word	0x200000e0

08001d28 <_lseek_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	4d07      	ldr	r5, [pc, #28]	; (8001d48 <_lseek_r+0x20>)
 8001d2c:	4604      	mov	r4, r0
 8001d2e:	4608      	mov	r0, r1
 8001d30:	4611      	mov	r1, r2
 8001d32:	2200      	movs	r2, #0
 8001d34:	602a      	str	r2, [r5, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	f000 f83e 	bl	8001db8 <_lseek>
 8001d3c:	1c43      	adds	r3, r0, #1
 8001d3e:	d102      	bne.n	8001d46 <_lseek_r+0x1e>
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	b103      	cbz	r3, 8001d46 <_lseek_r+0x1e>
 8001d44:	6023      	str	r3, [r4, #0]
 8001d46:	bd38      	pop	{r3, r4, r5, pc}
 8001d48:	200000e0 	.word	0x200000e0

08001d4c <__malloc_lock>:
 8001d4c:	4801      	ldr	r0, [pc, #4]	; (8001d54 <__malloc_lock+0x8>)
 8001d4e:	f7ff bdc3 	b.w	80018d8 <__retarget_lock_acquire_recursive>
 8001d52:	bf00      	nop
 8001d54:	200000d4 	.word	0x200000d4

08001d58 <__malloc_unlock>:
 8001d58:	4801      	ldr	r0, [pc, #4]	; (8001d60 <__malloc_unlock+0x8>)
 8001d5a:	f7ff bdbe 	b.w	80018da <__retarget_lock_release_recursive>
 8001d5e:	bf00      	nop
 8001d60:	200000d4 	.word	0x200000d4

08001d64 <_read_r>:
 8001d64:	b538      	push	{r3, r4, r5, lr}
 8001d66:	4d07      	ldr	r5, [pc, #28]	; (8001d84 <_read_r+0x20>)
 8001d68:	4604      	mov	r4, r0
 8001d6a:	4608      	mov	r0, r1
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	2200      	movs	r2, #0
 8001d70:	602a      	str	r2, [r5, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f000 f828 	bl	8001dc8 <_read>
 8001d78:	1c43      	adds	r3, r0, #1
 8001d7a:	d102      	bne.n	8001d82 <_read_r+0x1e>
 8001d7c:	682b      	ldr	r3, [r5, #0]
 8001d7e:	b103      	cbz	r3, 8001d82 <_read_r+0x1e>
 8001d80:	6023      	str	r3, [r4, #0]
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
 8001d84:	200000e0 	.word	0x200000e0

08001d88 <_close>:
 8001d88:	4b02      	ldr	r3, [pc, #8]	; (8001d94 <_close+0xc>)
 8001d8a:	2258      	movs	r2, #88	; 0x58
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d92:	4770      	bx	lr
 8001d94:	200000e0 	.word	0x200000e0

08001d98 <_fstat>:
 8001d98:	4b02      	ldr	r3, [pc, #8]	; (8001da4 <_fstat+0xc>)
 8001d9a:	2258      	movs	r2, #88	; 0x58
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	f04f 30ff 	mov.w	r0, #4294967295
 8001da2:	4770      	bx	lr
 8001da4:	200000e0 	.word	0x200000e0

08001da8 <_isatty>:
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <_isatty+0xc>)
 8001daa:	2258      	movs	r2, #88	; 0x58
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	2000      	movs	r0, #0
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	200000e0 	.word	0x200000e0

08001db8 <_lseek>:
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <_lseek+0xc>)
 8001dba:	2258      	movs	r2, #88	; 0x58
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc2:	4770      	bx	lr
 8001dc4:	200000e0 	.word	0x200000e0

08001dc8 <_read>:
 8001dc8:	4b02      	ldr	r3, [pc, #8]	; (8001dd4 <_read+0xc>)
 8001dca:	2258      	movs	r2, #88	; 0x58
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd2:	4770      	bx	lr
 8001dd4:	200000e0 	.word	0x200000e0

08001dd8 <_sbrk>:
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <_sbrk+0x14>)
 8001dda:	6811      	ldr	r1, [r2, #0]
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b909      	cbnz	r1, 8001de4 <_sbrk+0xc>
 8001de0:	4903      	ldr	r1, [pc, #12]	; (8001df0 <_sbrk+0x18>)
 8001de2:	6011      	str	r1, [r2, #0]
 8001de4:	6810      	ldr	r0, [r2, #0]
 8001de6:	4403      	add	r3, r0
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4770      	bx	lr
 8001dec:	200000e4 	.word	0x200000e4
 8001df0:	200000e8 	.word	0x200000e8

08001df4 <_init>:
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	bf00      	nop
 8001df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001dfa:	bc08      	pop	{r3}
 8001dfc:	469e      	mov	lr, r3
 8001dfe:	4770      	bx	lr

08001e00 <_fini>:
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	bf00      	nop
 8001e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e06:	bc08      	pop	{r3}
 8001e08:	469e      	mov	lr, r3
 8001e0a:	4770      	bx	lr
