/*
 * usbd_driver.h
 *
 *  Created on: Mar 6, 2023
 *      Author: IsaiahOdunze
 */

#ifndef USBD_DRIVER_H_
#define USBD_DRIVER_H_

#include "stm32f4xx.h"
#include "usb_standards.h"
#define USB_OTG_HS_GLOBAL ((USB_OTG_GlobalTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_GLOBAL_BASE))
#define USB_OTG_HS_DEVICE ((USB_OTG_DeviceTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_DEVICE_BASE))
#define USB_OTG_HS_PCGCCTL ((uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_PCGCCTL_BASE))

//total IN or OUT endpoints
#define ENDPOINT_COUNT 6

// \Description returns the structure containing the registers of a specific IN endpoint
// \param endpoint_number The number of the In endpoint that we want to access the registers of.
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
}

// \Description returns the structure containing the registers of a specific OUT endpoint
// \param endpoint_number The number of the OUT endpoint that we want to access the registers of.
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
}

inline static __IO uint32_t *FIFO(uint8_t endpoint_number)
{
	return (__IO uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
}

void initialize_gpio_pins();
void initialize_core();
void connect();
void disconnect();

static void configure_endpoint0(uint8_t);
static void configure_in_endpoint(uint8_t, UsbEndpointType, uint16_t);
static void deconfigure_endpoint(uint8_t);
static void refresh_fifo_start_addresses();
static void configure_rxfifo_size(uint16_t);
static void configure_txfifo_size(uint8_t, uint16_t);
static void usbrst_handler();
static void enumdne_handler();
static void rxflvl_handler();
void gintsts_handler();
#endif /* USBD_DRIVER_H_ */
